
obj/hand.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  0000099c  00000a30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000099c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080013a  0080013a  00000a6a  2**0
                  ALLOC
  3 .debug_aranges 000001f0  00000000  00000000  00000a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000042b  00000000  00000000  00000c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f39  00000000  00000000  00001085  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e1  00000000  00000000  00001fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000fda  00000000  00000000  0000269f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000320  00000000  00000000  0000367c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000482  00000000  00000000  0000399c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000823  00000000  00000000  00003e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000298  00000000  00000000  00004641  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

/* Returns the payload length */
uint8_t nrf24_payload_length()
{
    return payload_len;
}
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>

void xfputs (					/* Put a string to the specified device */
	void(*func)(unsigned char),	/* Pointer to the output function */
	const char*	str				/* Pointer to the string */
)
{
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

}

/******************************************************************************/
// Select the given row
void matrix_select_row(uint8_t r) {
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ec e9       	ldi	r30, 0x9C	; 156
  c0:	f9 e0       	ldi	r31, 0x09	; 9
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <.do_copy_data_start>

000000c4 <.do_copy_data_loop>:
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0

000000c8 <.do_copy_data_start>:
  c8:	aa 33       	cpi	r26, 0x3A	; 58
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <.do_copy_data_loop>

000000ce <__do_clear_bss>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	aa e3       	ldi	r26, 0x3A	; 58
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	ad 34       	cpi	r26, 0x4D	; 77
  da:	b1 07       	cpc	r27, r17
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 75 00 	call	0xea	; 0xea <main>
  e2:	0c 94 cc 04 	jmp	0x998	; 0x998 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <main>:

uint8_t matrix_prev[ROWS];
uint8_t hand = 0;

/******************************************************************************/
int main() {
  ea:	a0 e0       	ldi	r26, 0x00	; 0
  ec:	b0 e0       	ldi	r27, 0x00	; 0
  ee:	eb e7       	ldi	r30, 0x7B	; 123
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	0c 94 9f 04 	jmp	0x93e	; 0x93e <__prologue_saves__+0x14>
    //UHWCON |= (1<<UVREGE);

    // TODO: determine which hand from GPIO pin
    // TODO: set up ADC

    uart_init();
  f6:	0e 94 4c 04 	call	0x898	; 0x898 <uart_init>
    xdev_out(uart_put_char);
  fa:	8e e4       	ldi	r24, 0x4E	; 78
  fc:	94 e0       	ldi	r25, 0x04	; 4
  fe:	90 93 47 01 	sts	0x0147, r25
 102:	80 93 46 01 	sts	0x0146, r24
    xprintf("\r\nHand %d\r\n", hand);
 106:	00 d0       	rcall	.+0      	; 0x108 <main+0x1e>
 108:	00 d0       	rcall	.+0      	; 0x10a <main+0x20>
 10a:	ed b7       	in	r30, 0x3d	; 61
 10c:	fe b7       	in	r31, 0x3e	; 62
 10e:	31 96       	adiw	r30, 0x01	; 1
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	ad b7       	in	r26, 0x3d	; 61
 116:	be b7       	in	r27, 0x3e	; 62
 118:	12 96       	adiw	r26, 0x02	; 2
 11a:	9c 93       	st	X, r25
 11c:	8e 93       	st	-X, r24
 11e:	11 97       	sbiw	r26, 0x01	; 1
 120:	80 91 3a 01 	lds	r24, 0x013A
 124:	82 83       	std	Z+2, r24	; 0x02
 126:	13 82       	std	Z+3, r1	; 0x03
 128:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <xprintf>
    
    // Initialise NRF24
    // Set the last byte of the address to the hand ID
    rx_address[4] = hand;
 12c:	80 91 3a 01 	lds	r24, 0x013A
 130:	80 93 33 01 	sts	0x0133, r24
    nrf24_init();
 134:	0f 90       	pop	r0
 136:	0f 90       	pop	r0
 138:	0f 90       	pop	r0
 13a:	0f 90       	pop	r0
 13c:	0e 94 49 02 	call	0x492	; 0x492 <nrf24_init>
    nrf24_config(CHANNEL, sizeof msg);
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	63 e0       	ldi	r22, 0x03	; 3
 144:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nrf24_config>
    nrf24_tx_address(tx_address);
 148:	8a e2       	ldi	r24, 0x2A	; 42
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0e 94 9a 01 	call	0x334	; 0x334 <nrf24_tx_address>
    nrf24_rx_address(rx_address);
 150:	8f e2       	ldi	r24, 0x2F	; 47
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	0e 94 38 02 	call	0x470	; 0x470 <nrf24_rx_address>

    matrix_init();
 158:	0e 94 24 04 	call	0x848	; 0x848 <matrix_init>

    msg[0] = hand & 0x01;
 15c:	80 91 3a 01 	lds	r24, 0x013A
 160:	81 70       	andi	r24, 0x01	; 1
 162:	80 93 3d 01 	sts	0x013D, r24
    msg[1] = 0;
 166:	10 92 3e 01 	sts	0x013E, r1
    msg[2] = 0;
 16a:	10 92 3f 01 	sts	0x013F, r1

    st = nrf24_getStatus();
 16e:	0e 94 aa 01 	call	0x354	; 0x354 <nrf24_getStatus>
    xprintf("status=%d\r\n", st);
 172:	00 d0       	rcall	.+0      	; 0x174 <main+0x8a>
 174:	00 d0       	rcall	.+0      	; 0x176 <main+0x8c>
 176:	ed b7       	in	r30, 0x3d	; 61
 178:	fe b7       	in	r31, 0x3e	; 62
 17a:	31 96       	adiw	r30, 0x01	; 1
 17c:	2c e0       	ldi	r18, 0x0C	; 12
 17e:	31 e0       	ldi	r19, 0x01	; 1
 180:	ad b7       	in	r26, 0x3d	; 61
 182:	be b7       	in	r27, 0x3e	; 62
 184:	12 96       	adiw	r26, 0x02	; 2
 186:	3c 93       	st	X, r19
 188:	2e 93       	st	-X, r18
 18a:	11 97       	sbiw	r26, 0x01	; 1
 18c:	82 83       	std	Z+2, r24	; 0x02
 18e:	13 82       	std	Z+3, r1	; 0x03
 190:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <xprintf>
 194:	0f 90       	pop	r0
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
        matrix_scan();

        for (i=0; i<ROWS; i++) {
            change = matrix_prev[i] ^ matrix[i];
            if (change) {
                xprintf("%d %08b -> %08b\r\n", i, matrix_prev[i], matrix[i]);
 19c:	98 e1       	ldi	r25, 0x18	; 24
 19e:	c9 2e       	mov	r12, r25
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	d9 2e       	mov	r13, r25
    xprintf("status=%d\r\n", st);

    // Scan the matrix and detect any changes.
    // Modified rows are sent to the receiver.
    while (1) {
        matrix_scan();
 1a4:	0e 94 29 04 	call	0x852	; 0x852 <matrix_scan>
 1a8:	80 e4       	ldi	r24, 0x40	; 64
 1aa:	e8 2e       	mov	r14, r24
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	f8 2e       	mov	r15, r24
 1b0:	08 e4       	ldi	r16, 0x48	; 72
 1b2:	11 e0       	ldi	r17, 0x01	; 1
 1b4:	c0 e0       	ldi	r28, 0x00	; 0
 1b6:	d0 e0       	ldi	r29, 0x00	; 0

        for (i=0; i<ROWS; i++) {
            change = matrix_prev[i] ^ matrix[i];
 1b8:	f7 01       	movw	r30, r14
 1ba:	80 81       	ld	r24, Z
 1bc:	d8 01       	movw	r26, r16
 1be:	9c 91       	ld	r25, X
            if (change) {
 1c0:	89 17       	cp	r24, r25
 1c2:	71 f1       	breq	.+92     	; 0x220 <main+0x136>
                xprintf("%d %08b -> %08b\r\n", i, matrix_prev[i], matrix[i]);
 1c4:	ed b7       	in	r30, 0x3d	; 61
 1c6:	fe b7       	in	r31, 0x3e	; 62
 1c8:	38 97       	sbiw	r30, 0x08	; 8
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	f8 94       	cli
 1ce:	fe bf       	out	0x3e, r31	; 62
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	ed bf       	out	0x3d, r30	; 61
 1d4:	31 96       	adiw	r30, 0x01	; 1
 1d6:	ad b7       	in	r26, 0x3d	; 61
 1d8:	be b7       	in	r27, 0x3e	; 62
 1da:	12 96       	adiw	r26, 0x02	; 2
 1dc:	dc 92       	st	X, r13
 1de:	ce 92       	st	-X, r12
 1e0:	11 97       	sbiw	r26, 0x01	; 1
 1e2:	c2 83       	std	Z+2, r28	; 0x02
 1e4:	d3 83       	std	Z+3, r29	; 0x03
 1e6:	84 83       	std	Z+4, r24	; 0x04
 1e8:	15 82       	std	Z+5, r1	; 0x05
 1ea:	96 83       	std	Z+6, r25	; 0x06
 1ec:	17 82       	std	Z+7, r1	; 0x07
 1ee:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <xprintf>
                msg[1] = i;
 1f2:	c0 93 3e 01 	sts	0x013E, r28
                msg[2] = matrix[i];
 1f6:	f8 01       	movw	r30, r16
 1f8:	80 81       	ld	r24, Z
 1fa:	80 93 3f 01 	sts	0x013F, r24
                nrf24_send(msg);
 1fe:	2d b7       	in	r18, 0x3d	; 61
 200:	3e b7       	in	r19, 0x3e	; 62
 202:	28 5f       	subi	r18, 0xF8	; 248
 204:	3f 4f       	sbci	r19, 0xFF	; 255
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	f8 94       	cli
 20a:	3e bf       	out	0x3e, r19	; 62
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	2d bf       	out	0x3d, r18	; 61
 210:	8d e3       	ldi	r24, 0x3D	; 61
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	0e 94 13 02 	call	0x426	; 0x426 <nrf24_send>
                while (nrf24_isSending());
 218:	0e 94 b8 01 	call	0x370	; 0x370 <nrf24_isSending>
 21c:	88 23       	and	r24, r24
 21e:	e1 f7       	brne	.-8      	; 0x218 <main+0x12e>
            }
            matrix_prev[i] = matrix[i];
 220:	d8 01       	movw	r26, r16
 222:	8d 91       	ld	r24, X+
 224:	8d 01       	movw	r16, r26
 226:	f7 01       	movw	r30, r14
 228:	81 93       	st	Z+, r24
 22a:	7f 01       	movw	r14, r30
 22c:	21 96       	adiw	r28, 0x01	; 1
    // Scan the matrix and detect any changes.
    // Modified rows are sent to the receiver.
    while (1) {
        matrix_scan();

        for (i=0; i<ROWS; i++) {
 22e:	c5 30       	cpi	r28, 0x05	; 5
 230:	d1 05       	cpc	r29, r1
 232:	11 f6       	brne	.-124    	; 0x1b8 <main+0xce>
 234:	b7 cf       	rjmp	.-146    	; 0x1a4 <main+0xba>

00000236 <spi_transfer>:
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
}

/* software spi routine */
uint8_t spi_transfer(uint8_t tx)
{
 236:	ef 92       	push	r14
 238:	ff 92       	push	r15
 23a:	0f 93       	push	r16
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	18 2f       	mov	r17, r24
    uint8_t i = 0;
    uint8_t rx = 0;    

    nrf24_sck_digitalWrite(LOW);
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	0e 94 15 04 	call	0x82a	; 0x82a <nrf24_sck_digitalWrite>
 24a:	00 e0       	ldi	r16, 0x00	; 0
 24c:	c7 e0       	ldi	r28, 0x07	; 7
 24e:	d0 e0       	ldi	r29, 0x00	; 0

    for(i=0;i<8;i++)
    {

        if(tx & (1<<(7-i)))
 250:	e1 2e       	mov	r14, r17
 252:	ff 24       	eor	r15, r15
 254:	c7 01       	movw	r24, r14
 256:	0c 2e       	mov	r0, r28
 258:	02 c0       	rjmp	.+4      	; 0x25e <spi_transfer+0x28>
 25a:	95 95       	asr	r25
 25c:	87 95       	ror	r24
 25e:	0a 94       	dec	r0
 260:	e2 f7       	brpl	.-8      	; 0x25a <spi_transfer+0x24>
 262:	80 ff       	sbrs	r24, 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <spi_transfer+0x34>
        {
            nrf24_mosi_digitalWrite(HIGH);            
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	01 c0       	rjmp	.+2      	; 0x26c <spi_transfer+0x36>
        }
        else
        {
            nrf24_mosi_digitalWrite(LOW);
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 1b 04 	call	0x836	; 0x836 <nrf24_mosi_digitalWrite>
        }

        nrf24_sck_digitalWrite(HIGH);        
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	0e 94 15 04 	call	0x82a	; 0x82a <nrf24_sck_digitalWrite>

        rx = rx << 1;
 276:	00 0f       	add	r16, r16
        if(nrf24_miso_digitalRead())
 278:	0e 94 21 04 	call	0x842	; 0x842 <nrf24_miso_digitalRead>
 27c:	81 11       	cpse	r24, r1
        {
            rx |= 0x01;
 27e:	01 60       	ori	r16, 0x01	; 1
        }

        nrf24_sck_digitalWrite(LOW);                
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	0e 94 15 04 	call	0x82a	; 0x82a <nrf24_sck_digitalWrite>
 286:	21 97       	sbiw	r28, 0x01	; 1
    uint8_t i = 0;
    uint8_t rx = 0;    

    nrf24_sck_digitalWrite(LOW);

    for(i=0;i<8;i++)
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	cf 3f       	cpi	r28, 0xFF	; 255
 28c:	d8 07       	cpc	r29, r24
 28e:	11 f7       	brne	.-60     	; 0x254 <spi_transfer+0x1e>
        nrf24_sck_digitalWrite(LOW);                

    }

    return rx;
}
 290:	80 2f       	mov	r24, r16
 292:	cd b7       	in	r28, 0x3d	; 61
 294:	de b7       	in	r29, 0x3e	; 62
 296:	e6 e0       	ldi	r30, 0x06	; 6
 298:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__epilogue_restores__+0x18>

0000029c <nrf24_configRegister>:

}

/* Clocks only one byte into the given nrf24 register */
void nrf24_configRegister(uint8_t reg, uint8_t value)
{
 29c:	0f 93       	push	r16
 29e:	1f 93       	push	r17
 2a0:	18 2f       	mov	r17, r24
 2a2:	06 2f       	mov	r16, r22
    nrf24_csn_digitalWrite(LOW);
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	0e 94 0f 04 	call	0x81e	; 0x81e <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 2aa:	1f 71       	andi	r17, 0x1F	; 31
 2ac:	81 2f       	mov	r24, r17
 2ae:	80 62       	ori	r24, 0x20	; 32
 2b0:	0e 94 1b 01 	call	0x236	; 0x236 <spi_transfer>
    spi_transfer(value);
 2b4:	80 2f       	mov	r24, r16
 2b6:	0e 94 1b 01 	call	0x236	; 0x236 <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 0f 04 	call	0x81e	; 0x81e <nrf24_csn_digitalWrite>
}
 2c0:	1f 91       	pop	r17
 2c2:	0f 91       	pop	r16
 2c4:	08 95       	ret

000002c6 <nrf24_powerUpTx>:
    nrf24_ce_digitalWrite(HIGH);
}

void nrf24_powerUpTx()
{
    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 2c6:	87 e0       	ldi	r24, 0x07	; 7
 2c8:	60 e7       	ldi	r22, 0x70	; 112
 2ca:	0e 94 4e 01 	call	0x29c	; 0x29c <nrf24_configRegister>

    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	6e e0       	ldi	r22, 0x0E	; 14
 2d2:	0e 94 4e 01 	call	0x29c	; 0x29c <nrf24_configRegister>
}
 2d6:	08 95       	ret

000002d8 <nrf24_transmitSync>:

}

/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	06 2f       	mov	r16, r22
 2e2:	ec 01       	movw	r28, r24
 2e4:	10 e0       	ldi	r17, 0x00	; 0
 2e6:	04 c0       	rjmp	.+8      	; 0x2f0 <nrf24_transmitSync+0x18>
    uint8_t i;
    
    for(i=0;i<len;i++)
    {
        spi_transfer(dataout[i]);
 2e8:	89 91       	ld	r24, Y+
 2ea:	0e 94 1b 01 	call	0x236	; 0x236 <spi_transfer>
/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
    uint8_t i;
    
    for(i=0;i<len;i++)
 2ee:	1f 5f       	subi	r17, 0xFF	; 255
 2f0:	10 17       	cp	r17, r16
 2f2:	d0 f3       	brcs	.-12     	; 0x2e8 <nrf24_transmitSync+0x10>
    {
        spi_transfer(dataout[i]);
    }

}
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	1f 91       	pop	r17
 2fa:	0f 91       	pop	r16
 2fc:	08 95       	ret

000002fe <nrf24_writeRegister>:
    nrf24_csn_digitalWrite(HIGH);
}

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
{
 2fe:	ef 92       	push	r14
 300:	ff 92       	push	r15
 302:	0f 93       	push	r16
 304:	1f 93       	push	r17
 306:	18 2f       	mov	r17, r24
 308:	7b 01       	movw	r14, r22
 30a:	04 2f       	mov	r16, r20
    nrf24_csn_digitalWrite(LOW);
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	0e 94 0f 04 	call	0x81e	; 0x81e <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 312:	1f 71       	andi	r17, 0x1F	; 31
 314:	81 2f       	mov	r24, r17
 316:	80 62       	ori	r24, 0x20	; 32
 318:	0e 94 1b 01 	call	0x236	; 0x236 <spi_transfer>
    nrf24_transmitSync(value,len);
 31c:	c7 01       	movw	r24, r14
 31e:	60 2f       	mov	r22, r16
 320:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <nrf24_transmitSync>
    nrf24_csn_digitalWrite(HIGH);
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	0e 94 0f 04 	call	0x81e	; 0x81e <nrf24_csn_digitalWrite>
}
 32a:	1f 91       	pop	r17
 32c:	0f 91       	pop	r16
 32e:	ff 90       	pop	r15
 330:	ef 90       	pop	r14
 332:	08 95       	ret

00000334 <nrf24_tx_address>:
    return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
 334:	0f 93       	push	r16
 336:	1f 93       	push	r17
 338:	8c 01       	movw	r16, r24
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
 33a:	8a e0       	ldi	r24, 0x0A	; 10
 33c:	b8 01       	movw	r22, r16
 33e:	45 e0       	ldi	r20, 0x05	; 5
 340:	0e 94 7f 01 	call	0x2fe	; 0x2fe <nrf24_writeRegister>
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
 344:	80 e1       	ldi	r24, 0x10	; 16
 346:	b8 01       	movw	r22, r16
 348:	45 e0       	ldi	r20, 0x05	; 5
 34a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <nrf24_writeRegister>
}
 34e:	1f 91       	pop	r17
 350:	0f 91       	pop	r16
 352:	08 95       	ret

00000354 <nrf24_getStatus>:
    return 1; /* true */

}

uint8_t nrf24_getStatus()
{
 354:	1f 93       	push	r17
    uint8_t rv;
    nrf24_csn_digitalWrite(LOW);
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	0e 94 0f 04 	call	0x81e	; 0x81e <nrf24_csn_digitalWrite>
    rv = spi_transfer(NOP);
 35c:	8f ef       	ldi	r24, 0xFF	; 255
 35e:	0e 94 1b 01 	call	0x236	; 0x236 <spi_transfer>
 362:	18 2f       	mov	r17, r24
    nrf24_csn_digitalWrite(HIGH);
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	0e 94 0f 04 	call	0x81e	; 0x81e <nrf24_csn_digitalWrite>
    return rv;
}
 36a:	81 2f       	mov	r24, r17
 36c:	1f 91       	pop	r17
 36e:	08 95       	ret

00000370 <nrf24_isSending>:
uint8_t nrf24_isSending()
{
    uint8_t status;

    /* read the current status */
    status = nrf24_getStatus();
 370:	0e 94 aa 01 	call	0x354	; 0x354 <nrf24_getStatus>
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	80 73       	andi	r24, 0x30	; 48
 378:	09 f4       	brne	.+2      	; 0x37c <nrf24_isSending+0xc>
 37a:	91 e0       	ldi	r25, 0x01	; 1
        return 0; /* false */
    }

    return 1; /* true */

}
 37c:	89 2f       	mov	r24, r25
 37e:	08 95       	ret

00000380 <nrf24_powerUpRx>:
    }
}

void nrf24_powerUpRx()
{     
    nrf24_csn_digitalWrite(LOW);
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	0e 94 0f 04 	call	0x81e	; 0x81e <nrf24_csn_digitalWrite>
    spi_transfer(FLUSH_RX);
 386:	82 ee       	ldi	r24, 0xE2	; 226
 388:	0e 94 1b 01 	call	0x236	; 0x236 <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	0e 94 0f 04 	call	0x81e	; 0x81e <nrf24_csn_digitalWrite>

    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 392:	87 e0       	ldi	r24, 0x07	; 7
 394:	60 e7       	ldi	r22, 0x70	; 112
 396:	0e 94 4e 01 	call	0x29c	; 0x29c <nrf24_configRegister>

    nrf24_ce_digitalWrite(LOW);    
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	0e 94 09 04 	call	0x812	; 0x812 <nrf24_ce_digitalWrite>
    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));    
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	6f e0       	ldi	r22, 0x0F	; 15
 3a4:	0e 94 4e 01 	call	0x29c	; 0x29c <nrf24_configRegister>
    nrf24_ce_digitalWrite(HIGH);
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 09 04 	call	0x812	; 0x812 <nrf24_ce_digitalWrite>
}
 3ae:	08 95       	ret

000003b0 <nrf24_config>:
    nrf24_csn_digitalWrite(HIGH);    
}

/* configure the module */
void nrf24_config(uint8_t channel, uint8_t pay_length)
{
 3b0:	98 2f       	mov	r25, r24
    /* Use static payload length ... */
    payload_len = pay_length;
 3b2:	60 93 45 01 	sts	0x0145, r22

    // Set RF channel
    nrf24_configRegister(RF_CH,channel);
 3b6:	85 e0       	ldi	r24, 0x05	; 5
 3b8:	69 2f       	mov	r22, r25
 3ba:	0e 94 4e 01 	call	0x29c	; 0x29c <nrf24_configRegister>

    // Set length of incoming payload 
    nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
 3be:	81 e1       	ldi	r24, 0x11	; 17
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	0e 94 4e 01 	call	0x29c	; 0x29c <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P1, payload_len); // Data payload pipe
 3c6:	82 e1       	ldi	r24, 0x12	; 18
 3c8:	60 91 45 01 	lds	r22, 0x0145
 3cc:	0e 94 4e 01 	call	0x29c	; 0x29c <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used 
 3d0:	83 e1       	ldi	r24, 0x13	; 19
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	0e 94 4e 01 	call	0x29c	; 0x29c <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used 
 3d8:	84 e1       	ldi	r24, 0x14	; 20
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	0e 94 4e 01 	call	0x29c	; 0x29c <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used 
 3e0:	85 e1       	ldi	r24, 0x15	; 21
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	0e 94 4e 01 	call	0x29c	; 0x29c <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used 
 3e8:	86 e1       	ldi	r24, 0x16	; 22
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	0e 94 4e 01 	call	0x29c	; 0x29c <nrf24_configRegister>

    // 1 Mbps, TX gain: 0dbm
    nrf24_configRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR));
 3f0:	86 e0       	ldi	r24, 0x06	; 6
 3f2:	66 e0       	ldi	r22, 0x06	; 6
 3f4:	0e 94 4e 01 	call	0x29c	; 0x29c <nrf24_configRegister>

    // CRC enable, 1 byte CRC length
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	6c e0       	ldi	r22, 0x0C	; 12
 3fc:	0e 94 4e 01 	call	0x29c	; 0x29c <nrf24_configRegister>

    // Auto Acknowledgment
    nrf24_configRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5));
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	63 e0       	ldi	r22, 0x03	; 3
 404:	0e 94 4e 01 	call	0x29c	; 0x29c <nrf24_configRegister>

    // Enable RX addresses
    nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0<<ERX_P5));
 408:	82 e0       	ldi	r24, 0x02	; 2
 40a:	63 e0       	ldi	r22, 0x03	; 3
 40c:	0e 94 4e 01 	call	0x29c	; 0x29c <nrf24_configRegister>

    // Auto retransmit delay: 1000 us and Up to 15 retransmit trials
    nrf24_configRegister(SETUP_RETR,(0x03<<ARD)|(0x0F<<ARC));
 410:	84 e0       	ldi	r24, 0x04	; 4
 412:	6f e3       	ldi	r22, 0x3F	; 63
 414:	0e 94 4e 01 	call	0x29c	; 0x29c <nrf24_configRegister>

    // Dynamic length configurations: No dynamic length
    nrf24_configRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5));
 418:	8c e1       	ldi	r24, 0x1C	; 28
 41a:	60 e0       	ldi	r22, 0x00	; 0
 41c:	0e 94 4e 01 	call	0x29c	; 0x29c <nrf24_configRegister>

    // Start listening
    nrf24_powerUpRx();
 420:	0e 94 c0 01 	call	0x380	; 0x380 <nrf24_powerUpRx>
}
 424:	08 95       	ret

00000426 <nrf24_send>:
}

// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
void nrf24_send(uint8_t* value) 
{    
 426:	0f 93       	push	r16
 428:	1f 93       	push	r17
 42a:	8c 01       	movw	r16, r24
    /* Go to Standby-I first */
    nrf24_ce_digitalWrite(LOW);
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	0e 94 09 04 	call	0x812	; 0x812 <nrf24_ce_digitalWrite>
     
    /* Set to transmitter mode , Power up if needed */
    nrf24_powerUpTx();
 432:	0e 94 63 01 	call	0x2c6	; 0x2c6 <nrf24_powerUpTx>

    /* Do we really need to flush TX fifo each time ? */
    #if 1
        /* Pull down chip select */
        nrf24_csn_digitalWrite(LOW);           
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	0e 94 0f 04 	call	0x81e	; 0x81e <nrf24_csn_digitalWrite>

        /* Write cmd to flush transmit FIFO */
        spi_transfer(FLUSH_TX);     
 43c:	81 ee       	ldi	r24, 0xE1	; 225
 43e:	0e 94 1b 01 	call	0x236	; 0x236 <spi_transfer>

        /* Pull up chip select */
        nrf24_csn_digitalWrite(HIGH);                    
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	0e 94 0f 04 	call	0x81e	; 0x81e <nrf24_csn_digitalWrite>
    #endif 

    /* Pull down chip select */
    nrf24_csn_digitalWrite(LOW);
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	0e 94 0f 04 	call	0x81e	; 0x81e <nrf24_csn_digitalWrite>

    /* Write cmd to write payload */
    spi_transfer(W_TX_PAYLOAD);
 44e:	80 ea       	ldi	r24, 0xA0	; 160
 450:	0e 94 1b 01 	call	0x236	; 0x236 <spi_transfer>

    /* Write payload */
    nrf24_transmitSync(value,payload_len);   
 454:	c8 01       	movw	r24, r16
 456:	60 91 45 01 	lds	r22, 0x0145
 45a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <nrf24_transmitSync>

    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	0e 94 0f 04 	call	0x81e	; 0x81e <nrf24_csn_digitalWrite>

    /* Start the transmission */
    nrf24_ce_digitalWrite(HIGH);    
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	0e 94 09 04 	call	0x812	; 0x812 <nrf24_ce_digitalWrite>
}
 46a:	1f 91       	pop	r17
 46c:	0f 91       	pop	r16
 46e:	08 95       	ret

00000470 <nrf24_rx_address>:
    nrf24_powerUpRx();
}

/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) 
{
 470:	0f 93       	push	r16
 472:	1f 93       	push	r17
 474:	8c 01       	movw	r16, r24
    nrf24_ce_digitalWrite(LOW);
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	0e 94 09 04 	call	0x812	; 0x812 <nrf24_ce_digitalWrite>
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
 47c:	8b e0       	ldi	r24, 0x0B	; 11
 47e:	b8 01       	movw	r22, r16
 480:	45 e0       	ldi	r20, 0x05	; 5
 482:	0e 94 7f 01 	call	0x2fe	; 0x2fe <nrf24_writeRegister>
    nrf24_ce_digitalWrite(HIGH);
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	0e 94 09 04 	call	0x812	; 0x812 <nrf24_ce_digitalWrite>
}
 48c:	1f 91       	pop	r17
 48e:	0f 91       	pop	r16
 490:	08 95       	ret

00000492 <nrf24_init>:
uint8_t payload_len;

/* init the hardware pins */
void nrf24_init() 
{
    nrf24_setupPins();
 492:	0e 94 03 04 	call	0x806	; 0x806 <nrf24_setupPins>
    nrf24_ce_digitalWrite(LOW);
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	0e 94 09 04 	call	0x812	; 0x812 <nrf24_ce_digitalWrite>
    nrf24_csn_digitalWrite(HIGH);    
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	0e 94 0f 04 	call	0x81e	; 0x81e <nrf24_csn_digitalWrite>
}
 4a2:	08 95       	ret

000004a4 <xputc>:

void xputc (char c)
{
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */

	if (outptr) {
 4a4:	e0 91 3b 01 	lds	r30, 0x013B
 4a8:	f0 91 3c 01 	lds	r31, 0x013C
 4ac:	30 97       	sbiw	r30, 0x00	; 0
 4ae:	31 f0       	breq	.+12     	; 0x4bc <xputc+0x18>
		*outptr++ = (unsigned char)c;
 4b0:	81 93       	st	Z+, r24
 4b2:	f0 93 3c 01 	sts	0x013C, r31
 4b6:	e0 93 3b 01 	sts	0x013B, r30
 4ba:	08 95       	ret
		return;
	}

	if (xfunc_out) xfunc_out((unsigned char)c);
 4bc:	e0 91 46 01 	lds	r30, 0x0146
 4c0:	f0 91 47 01 	lds	r31, 0x0147
 4c4:	30 97       	sbiw	r30, 0x00	; 0
 4c6:	09 f0       	breq	.+2      	; 0x4ca <xputc+0x26>
 4c8:	09 95       	icall
 4ca:	08 95       	ret

000004cc <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 4cc:	cf 93       	push	r28
 4ce:	df 93       	push	r29
 4d0:	ec 01       	movw	r28, r24
 4d2:	03 c0       	rjmp	.+6      	; 0x4da <xputs+0xe>
	while (*str)
		xputc(*str++);
 4d4:	21 96       	adiw	r28, 0x01	; 1
 4d6:	0e 94 52 02 	call	0x4a4	; 0x4a4 <xputc>

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
	while (*str)
 4da:	88 81       	ld	r24, Y
 4dc:	88 23       	and	r24, r24
 4de:	d1 f7       	brne	.-12     	; 0x4d4 <xputs+0x8>
		xputc(*str++);
}
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	08 95       	ret

000004e6 <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 4e6:	a4 e1       	ldi	r26, 0x14	; 20
 4e8:	b0 e0       	ldi	r27, 0x00	; 0
 4ea:	e9 e7       	ldi	r30, 0x79	; 121
 4ec:	f2 e0       	ldi	r31, 0x02	; 2
 4ee:	0c 94 95 04 	jmp	0x92a	; 0x92a <__prologue_saves__>
 4f2:	2c 01       	movw	r4, r24
 4f4:	7b 01       	movw	r14, r22
 4f6:	04 c0       	rjmp	.+8      	; 0x500 <xvprintf+0x1a>
		if (!c) break;				/* End of format? */
		d = c;
		if (d >= 'a') d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	e8 0e       	add	r14, r24
 4fe:	f9 1e       	adc	r15, r25
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 500:	d2 01       	movw	r26, r4
 502:	8c 91       	ld	r24, X
		if (!c) break;				/* End of format? */
 504:	88 23       	and	r24, r24
 506:	09 f4       	brne	.+2      	; 0x50a <xvprintf+0x24>
 508:	69 c1       	rjmp	.+722    	; 0x7dc <xvprintf+0x2f6>
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 50a:	08 94       	sec
 50c:	41 1c       	adc	r4, r1
 50e:	51 1c       	adc	r5, r1
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass through it if not a % sequense */
 510:	85 32       	cpi	r24, 0x25	; 37
 512:	09 f0       	breq	.+2      	; 0x516 <xvprintf+0x30>
 514:	a6 c0       	rjmp	.+332    	; 0x662 <xvprintf+0x17c>
			xputc(c); continue;
		}
		f = 0;
		c = *fmt++;					/* Get first char of the sequense */
 516:	f2 01       	movw	r30, r4
 518:	b1 90       	ld	r11, Z+
 51a:	2f 01       	movw	r4, r30
		if (c == '0') {				/* Flag: '0' padded */
 51c:	f0 e3       	ldi	r31, 0x30	; 48
 51e:	bf 16       	cp	r11, r31
 520:	39 f4       	brne	.+14     	; 0x530 <xvprintf+0x4a>
			f = 1; c = *fmt++;
 522:	d2 01       	movw	r26, r4
 524:	bd 90       	ld	r11, X+
 526:	2d 01       	movw	r4, r26
 528:	f1 e0       	ldi	r31, 0x01	; 1
 52a:	8f 2e       	mov	r8, r31
 52c:	91 2c       	mov	r9, r1
 52e:	0c c0       	rjmp	.+24     	; 0x548 <xvprintf+0x62>
		} else {
			if (c == '-') {			/* Flag: left justified */
 530:	bd e2       	ldi	r27, 0x2D	; 45
 532:	bb 16       	cp	r11, r27
 534:	19 f0       	breq	.+6      	; 0x53c <xvprintf+0x56>
 536:	88 24       	eor	r8, r8
 538:	99 24       	eor	r9, r9
 53a:	06 c0       	rjmp	.+12     	; 0x548 <xvprintf+0x62>
				f = 2; c = *fmt++;
 53c:	f2 01       	movw	r30, r4
 53e:	b1 90       	ld	r11, Z+
 540:	2f 01       	movw	r4, r30
 542:	e2 e0       	ldi	r30, 0x02	; 2
 544:	8e 2e       	mov	r8, r30
 546:	91 2c       	mov	r9, r1
 548:	66 24       	eor	r6, r6
 54a:	77 24       	eor	r7, r7
 54c:	17 c0       	rjmp	.+46     	; 0x57c <xvprintf+0x96>
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
			w = w * 10 + c - '0';
 54e:	c3 01       	movw	r24, r6
 550:	73 e0       	ldi	r23, 0x03	; 3
 552:	88 0f       	add	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	7a 95       	dec	r23
 558:	e1 f7       	brne	.-8      	; 0x552 <xvprintf+0x6c>
 55a:	66 0c       	add	r6, r6
 55c:	77 1c       	adc	r7, r7
 55e:	68 0e       	add	r6, r24
 560:	79 1e       	adc	r7, r25
 562:	8b 2d       	mov	r24, r11
 564:	99 27       	eor	r25, r25
 566:	87 fd       	sbrc	r24, 7
 568:	90 95       	com	r25
 56a:	68 0e       	add	r6, r24
 56c:	79 1e       	adc	r7, r25
 56e:	80 ed       	ldi	r24, 0xD0	; 208
 570:	9f ef       	ldi	r25, 0xFF	; 255
 572:	68 0e       	add	r6, r24
 574:	79 1e       	adc	r7, r25
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 576:	d2 01       	movw	r26, r4
 578:	bd 90       	ld	r11, X+
 57a:	2d 01       	movw	r4, r26
 57c:	8b 2d       	mov	r24, r11
 57e:	80 53       	subi	r24, 0x30	; 48
 580:	8a 30       	cpi	r24, 0x0A	; 10
 582:	28 f3       	brcs	.-54     	; 0x54e <xvprintf+0x68>
			w = w * 10 + c - '0';
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 584:	bc e6       	ldi	r27, 0x6C	; 108
 586:	bb 16       	cp	r11, r27
 588:	19 f0       	breq	.+6      	; 0x590 <xvprintf+0xaa>
 58a:	ec e4       	ldi	r30, 0x4C	; 76
 58c:	be 16       	cp	r11, r30
 58e:	39 f4       	brne	.+14     	; 0x59e <xvprintf+0xb8>
			f |= 4; c = *fmt++;
 590:	84 e0       	ldi	r24, 0x04	; 4
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	88 2a       	or	r8, r24
 596:	99 2a       	or	r9, r25
 598:	d2 01       	movw	r26, r4
 59a:	bd 90       	ld	r11, X+
 59c:	2d 01       	movw	r4, r26
		}
		if (!c) break;				/* End of format? */
 59e:	bb 20       	and	r11, r11
 5a0:	09 f4       	brne	.+2      	; 0x5a4 <xvprintf+0xbe>
 5a2:	1c c1       	rjmp	.+568    	; 0x7dc <xvprintf+0x2f6>
		d = c;
		if (d >= 'a') d -= 0x20;
 5a4:	b0 e6       	ldi	r27, 0x60	; 96
 5a6:	bb 15       	cp	r27, r11
 5a8:	14 f0       	brlt	.+4      	; 0x5ae <xvprintf+0xc8>
 5aa:	eb 2d       	mov	r30, r11
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <xvprintf+0xcc>
 5ae:	eb 2d       	mov	r30, r11
 5b0:	e0 52       	subi	r30, 0x20	; 32
		switch (d) {				/* Type is... */
 5b2:	ef 34       	cpi	r30, 0x4F	; 79
 5b4:	a1 f0       	breq	.+40     	; 0x5de <xvprintf+0xf8>
 5b6:	e0 35       	cpi	r30, 0x50	; 80
 5b8:	4c f4       	brge	.+18     	; 0x5cc <xvprintf+0xe6>
 5ba:	e3 34       	cpi	r30, 0x43	; 67
 5bc:	09 f4       	brne	.+2      	; 0x5c0 <xvprintf+0xda>
 5be:	44 c0       	rjmp	.+136    	; 0x648 <xvprintf+0x162>
 5c0:	e4 34       	cpi	r30, 0x44	; 68
 5c2:	81 f0       	breq	.+32     	; 0x5e4 <xvprintf+0xfe>
 5c4:	e2 34       	cpi	r30, 0x42	; 66
 5c6:	09 f0       	breq	.+2      	; 0x5ca <xvprintf+0xe4>
 5c8:	4b c0       	rjmp	.+150    	; 0x660 <xvprintf+0x17a>
 5ca:	4e c0       	rjmp	.+156    	; 0x668 <xvprintf+0x182>
 5cc:	e5 35       	cpi	r30, 0x55	; 85
 5ce:	51 f0       	breq	.+20     	; 0x5e4 <xvprintf+0xfe>
 5d0:	e8 35       	cpi	r30, 0x58	; 88
 5d2:	09 f4       	brne	.+2      	; 0x5d6 <xvprintf+0xf0>
 5d4:	42 c0       	rjmp	.+132    	; 0x65a <xvprintf+0x174>
 5d6:	e3 35       	cpi	r30, 0x53	; 83
 5d8:	09 f0       	breq	.+2      	; 0x5dc <xvprintf+0xf6>
 5da:	42 c0       	rjmp	.+132    	; 0x660 <xvprintf+0x17a>
 5dc:	06 c0       	rjmp	.+12     	; 0x5ea <xvprintf+0x104>
 5de:	28 e0       	ldi	r18, 0x08	; 8
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	44 c0       	rjmp	.+136    	; 0x66c <xvprintf+0x186>
 5e4:	2a e0       	ldi	r18, 0x0A	; 10
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	41 c0       	rjmp	.+130    	; 0x66c <xvprintf+0x186>
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 5ea:	f7 01       	movw	r30, r14
 5ec:	a0 80       	ld	r10, Z
 5ee:	b1 80       	ldd	r11, Z+1	; 0x01
 5f0:	00 e0       	ldi	r16, 0x00	; 0
 5f2:	10 e0       	ldi	r17, 0x00	; 0
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <xvprintf+0x114>
			for (j = 0; p[j]; j++) ;
 5f6:	0f 5f       	subi	r16, 0xFF	; 255
 5f8:	1f 4f       	sbci	r17, 0xFF	; 255
 5fa:	f5 01       	movw	r30, r10
 5fc:	e0 0f       	add	r30, r16
 5fe:	f1 1f       	adc	r31, r17
 600:	80 81       	ld	r24, Z
 602:	88 23       	and	r24, r24
 604:	c1 f7       	brne	.-16     	; 0x5f6 <xvprintf+0x110>
 606:	04 c0       	rjmp	.+8      	; 0x610 <xvprintf+0x12a>
			while (!(f & 2) && j++ < w) xputc(' ');
 608:	80 e2       	ldi	r24, 0x20	; 32
 60a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <xputc>
 60e:	05 c0       	rjmp	.+10     	; 0x61a <xvprintf+0x134>
 610:	52 e0       	ldi	r21, 0x02	; 2
 612:	c5 2e       	mov	r12, r21
 614:	d1 2c       	mov	r13, r1
 616:	c8 20       	and	r12, r8
 618:	d9 20       	and	r13, r9
 61a:	c1 14       	cp	r12, r1
 61c:	d1 04       	cpc	r13, r1
 61e:	39 f4       	brne	.+14     	; 0x62e <xvprintf+0x148>
 620:	0f 5f       	subi	r16, 0xFF	; 255
 622:	1f 4f       	sbci	r17, 0xFF	; 255
 624:	c8 01       	movw	r24, r16
 626:	01 97       	sbiw	r24, 0x01	; 1
 628:	86 15       	cp	r24, r6
 62a:	97 05       	cpc	r25, r7
 62c:	68 f3       	brcs	.-38     	; 0x608 <xvprintf+0x122>
			xputs(p);
 62e:	c5 01       	movw	r24, r10
 630:	0e 94 66 02 	call	0x4cc	; 0x4cc <xputs>
 634:	05 c0       	rjmp	.+10     	; 0x640 <xvprintf+0x15a>
			while (j++ < w) xputc(' ');
 636:	80 e2       	ldi	r24, 0x20	; 32
 638:	0e 94 52 02 	call	0x4a4	; 0x4a4 <xputc>
 63c:	0f 5f       	subi	r16, 0xFF	; 255
 63e:	1f 4f       	sbci	r17, 0xFF	; 255
 640:	06 15       	cp	r16, r6
 642:	17 05       	cpc	r17, r7
 644:	c0 f3       	brcs	.-16     	; 0x636 <xvprintf+0x150>
 646:	58 cf       	rjmp	.-336    	; 0x4f8 <xvprintf+0x12>
			continue;
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
 648:	87 01       	movw	r16, r14
 64a:	0e 5f       	subi	r16, 0xFE	; 254
 64c:	1f 4f       	sbci	r17, 0xFF	; 255
 64e:	d7 01       	movw	r26, r14
 650:	8c 91       	ld	r24, X
 652:	0e 94 52 02 	call	0x4a4	; 0x4a4 <xputc>
 656:	78 01       	movw	r14, r16
 658:	53 cf       	rjmp	.-346    	; 0x500 <xvprintf+0x1a>
 65a:	20 e1       	ldi	r18, 0x10	; 16
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	06 c0       	rjmp	.+12     	; 0x66c <xvprintf+0x186>
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 660:	8b 2d       	mov	r24, r11
 662:	0e 94 52 02 	call	0x4a4	; 0x4a4 <xputc>
 666:	4c cf       	rjmp	.-360    	; 0x500 <xvprintf+0x1a>
 668:	22 e0       	ldi	r18, 0x02	; 2
 66a:	30 e0       	ldi	r19, 0x00	; 0
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 66c:	82 fe       	sbrs	r8, 2
 66e:	0d c0       	rjmp	.+26     	; 0x68a <xvprintf+0x1a4>
 670:	44 e0       	ldi	r20, 0x04	; 4
 672:	24 2e       	mov	r2, r20
 674:	31 2c       	mov	r3, r1
 676:	2e 0c       	add	r2, r14
 678:	3f 1c       	adc	r3, r15
 67a:	d7 01       	movw	r26, r14
 67c:	ed 90       	ld	r14, X+
 67e:	fd 90       	ld	r15, X+
 680:	0d 91       	ld	r16, X+
 682:	1c 91       	ld	r17, X
		if (d == 'D' && (v & 0x80000000)) {
 684:	e4 34       	cpi	r30, 0x44	; 68
 686:	11 f5       	brne	.+68     	; 0x6cc <xvprintf+0x1e6>
 688:	13 c0       	rjmp	.+38     	; 0x6b0 <xvprintf+0x1ca>
 68a:	c7 01       	movw	r24, r14
 68c:	02 96       	adiw	r24, 0x02	; 2
 68e:	d7 01       	movw	r26, r14
 690:	6d 91       	ld	r22, X+
 692:	7c 91       	ld	r23, X
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 694:	e4 34       	cpi	r30, 0x44	; 68
 696:	39 f4       	brne	.+14     	; 0x6a6 <xvprintf+0x1c0>
 698:	1c 01       	movw	r2, r24
 69a:	7b 01       	movw	r14, r22
 69c:	00 27       	eor	r16, r16
 69e:	f7 fc       	sbrc	r15, 7
 6a0:	00 95       	com	r16
 6a2:	10 2f       	mov	r17, r16
 6a4:	05 c0       	rjmp	.+10     	; 0x6b0 <xvprintf+0x1ca>
 6a6:	1c 01       	movw	r2, r24
 6a8:	7b 01       	movw	r14, r22
 6aa:	00 e0       	ldi	r16, 0x00	; 0
 6ac:	10 e0       	ldi	r17, 0x00	; 0
 6ae:	0e c0       	rjmp	.+28     	; 0x6cc <xvprintf+0x1e6>
		if (d == 'D' && (v & 0x80000000)) {
 6b0:	17 ff       	sbrs	r17, 7
 6b2:	0c c0       	rjmp	.+24     	; 0x6cc <xvprintf+0x1e6>
			v = 0 - v;
 6b4:	10 95       	com	r17
 6b6:	00 95       	com	r16
 6b8:	f0 94       	com	r15
 6ba:	e0 94       	com	r14
 6bc:	e1 1c       	adc	r14, r1
 6be:	f1 1c       	adc	r15, r1
 6c0:	01 1d       	adc	r16, r1
 6c2:	11 1d       	adc	r17, r1
			f |= 8;
 6c4:	e8 e0       	ldi	r30, 0x08	; 8
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	8e 2a       	or	r8, r30
 6ca:	9f 2a       	or	r9, r31
 6cc:	cc 24       	eor	r12, r12
 6ce:	dd 24       	eor	r13, r13
		}
		i = 0;
		do {
			d = (char)(v % r); v /= r;
 6d0:	c9 01       	movw	r24, r18
 6d2:	a0 e0       	ldi	r26, 0x00	; 0
 6d4:	b0 e0       	ldi	r27, 0x00	; 0
 6d6:	89 8b       	std	Y+17, r24	; 0x11
 6d8:	9a 8b       	std	Y+18, r25	; 0x12
 6da:	ab 8b       	std	Y+19, r26	; 0x13
 6dc:	bc 8b       	std	Y+20, r27	; 0x14
 6de:	c8 01       	movw	r24, r16
 6e0:	b7 01       	movw	r22, r14
 6e2:	29 89       	ldd	r18, Y+17	; 0x11
 6e4:	3a 89       	ldd	r19, Y+18	; 0x12
 6e6:	4b 89       	ldd	r20, Y+19	; 0x13
 6e8:	5c 89       	ldd	r21, Y+20	; 0x14
 6ea:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__udivmodsi4>
 6ee:	a6 2e       	mov	r10, r22
 6f0:	c8 01       	movw	r24, r16
 6f2:	b7 01       	movw	r22, r14
 6f4:	29 89       	ldd	r18, Y+17	; 0x11
 6f6:	3a 89       	ldd	r19, Y+18	; 0x12
 6f8:	4b 89       	ldd	r20, Y+19	; 0x13
 6fa:	5c 89       	ldd	r21, Y+20	; 0x14
 6fc:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__udivmodsi4>
 700:	c9 01       	movw	r24, r18
 702:	da 01       	movw	r26, r20
 704:	7c 01       	movw	r14, r24
 706:	8d 01       	movw	r16, r26
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 708:	e9 e0       	ldi	r30, 0x09	; 9
 70a:	ea 15       	cp	r30, r10
 70c:	3c f4       	brge	.+14     	; 0x71c <xvprintf+0x236>
 70e:	f8 e7       	ldi	r31, 0x78	; 120
 710:	bf 16       	cp	r11, r31
 712:	11 f0       	breq	.+4      	; 0x718 <xvprintf+0x232>
 714:	27 e0       	ldi	r18, 0x07	; 7
 716:	01 c0       	rjmp	.+2      	; 0x71a <xvprintf+0x234>
 718:	27 e2       	ldi	r18, 0x27	; 39
 71a:	a2 0e       	add	r10, r18
			s[i++] = d + '0';
 71c:	e1 e0       	ldi	r30, 0x01	; 1
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	ec 0f       	add	r30, r28
 722:	fd 1f       	adc	r31, r29
 724:	ec 0d       	add	r30, r12
 726:	fd 1d       	adc	r31, r13
 728:	20 e3       	ldi	r18, 0x30	; 48
 72a:	a2 0e       	add	r10, r18
 72c:	a0 82       	st	Z, r10
 72e:	08 94       	sec
 730:	c1 1c       	adc	r12, r1
 732:	d1 1c       	adc	r13, r1
		} while (v && i < sizeof(s));
 734:	00 97       	sbiw	r24, 0x00	; 0
 736:	a1 05       	cpc	r26, r1
 738:	b1 05       	cpc	r27, r1
 73a:	21 f0       	breq	.+8      	; 0x744 <xvprintf+0x25e>
 73c:	80 e1       	ldi	r24, 0x10	; 16
 73e:	c8 16       	cp	r12, r24
 740:	d1 04       	cpc	r13, r1
 742:	69 f6       	brne	.-102    	; 0x6de <xvprintf+0x1f8>
 744:	86 01       	movw	r16, r12
		if (f & 8) s[i++] = '-';
 746:	83 fe       	sbrs	r8, 3
 748:	0a c0       	rjmp	.+20     	; 0x75e <xvprintf+0x278>
 74a:	e1 e0       	ldi	r30, 0x01	; 1
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	ec 0f       	add	r30, r28
 750:	fd 1f       	adc	r31, r29
 752:	ec 0d       	add	r30, r12
 754:	fd 1d       	adc	r31, r13
 756:	9d e2       	ldi	r25, 0x2D	; 45
 758:	90 83       	st	Z, r25
 75a:	0f 5f       	subi	r16, 0xFF	; 255
 75c:	1f 4f       	sbci	r17, 0xFF	; 255
		j = i; d = (f & 1) ? '0' : ' ';
 75e:	80 fc       	sbrc	r8, 0
 760:	03 c0       	rjmp	.+6      	; 0x768 <xvprintf+0x282>
 762:	30 e2       	ldi	r19, 0x20	; 32
 764:	b3 2e       	mov	r11, r19
 766:	02 c0       	rjmp	.+4      	; 0x76c <xvprintf+0x286>
 768:	20 e3       	ldi	r18, 0x30	; 48
 76a:	b2 2e       	mov	r11, r18
 76c:	68 01       	movw	r12, r16
		while (!(f & 2) && j++ < w) xputc(d);
 76e:	92 e0       	ldi	r25, 0x02	; 2
 770:	e9 2e       	mov	r14, r25
 772:	f1 2c       	mov	r15, r1
 774:	e8 20       	and	r14, r8
 776:	f9 20       	and	r15, r9
 778:	03 c0       	rjmp	.+6      	; 0x780 <xvprintf+0x29a>
 77a:	8b 2d       	mov	r24, r11
 77c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <xputc>
 780:	e1 14       	cp	r14, r1
 782:	f1 04       	cpc	r15, r1
 784:	41 f4       	brne	.+16     	; 0x796 <xvprintf+0x2b0>
 786:	08 94       	sec
 788:	c1 1c       	adc	r12, r1
 78a:	d1 1c       	adc	r13, r1
 78c:	c6 01       	movw	r24, r12
 78e:	01 97       	sbiw	r24, 0x01	; 1
 790:	86 15       	cp	r24, r6
 792:	97 05       	cpc	r25, r7
 794:	90 f3       	brcs	.-28     	; 0x77a <xvprintf+0x294>
 796:	01 50       	subi	r16, 0x01	; 1
 798:	10 40       	sbci	r17, 0x00	; 0
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	e8 2e       	mov	r14, r24
 79e:	f1 2c       	mov	r15, r1
 7a0:	ec 0e       	add	r14, r28
 7a2:	fd 1e       	adc	r15, r29
 7a4:	e0 0e       	add	r14, r16
 7a6:	f1 1e       	adc	r15, r17
 7a8:	0f 5f       	subi	r16, 0xFF	; 255
 7aa:	1f 4f       	sbci	r17, 0xFF	; 255
		do xputc(s[--i]); while(i);
 7ac:	01 50       	subi	r16, 0x01	; 1
 7ae:	10 40       	sbci	r17, 0x00	; 0
 7b0:	d7 01       	movw	r26, r14
 7b2:	8c 91       	ld	r24, X
 7b4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <xputc>
 7b8:	08 94       	sec
 7ba:	e1 08       	sbc	r14, r1
 7bc:	f1 08       	sbc	r15, r1
 7be:	01 15       	cp	r16, r1
 7c0:	11 05       	cpc	r17, r1
 7c2:	a1 f7       	brne	.-24     	; 0x7ac <xvprintf+0x2c6>
 7c4:	06 c0       	rjmp	.+12     	; 0x7d2 <xvprintf+0x2ec>
		while (j++ < w) xputc(' ');
 7c6:	80 e2       	ldi	r24, 0x20	; 32
 7c8:	0e 94 52 02 	call	0x4a4	; 0x4a4 <xputc>
 7cc:	08 94       	sec
 7ce:	c1 1c       	adc	r12, r1
 7d0:	d1 1c       	adc	r13, r1
 7d2:	c6 14       	cp	r12, r6
 7d4:	d7 04       	cpc	r13, r7
 7d6:	b8 f3       	brcs	.-18     	; 0x7c6 <xvprintf+0x2e0>
 7d8:	71 01       	movw	r14, r2
 7da:	92 ce       	rjmp	.-732    	; 0x500 <xvprintf+0x1a>
	}
}
 7dc:	64 96       	adiw	r28, 0x14	; 20
 7de:	e2 e1       	ldi	r30, 0x12	; 18
 7e0:	0c 94 b1 04 	jmp	0x962	; 0x962 <__epilogue_restores__>

000007e4 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 7e4:	a0 e0       	ldi	r26, 0x00	; 0
 7e6:	b0 e0       	ldi	r27, 0x00	; 0
 7e8:	e8 ef       	ldi	r30, 0xF8	; 248
 7ea:	f3 e0       	ldi	r31, 0x03	; 3
 7ec:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__prologue_saves__+0x20>
 7f0:	fe 01       	movw	r30, r28
 7f2:	35 96       	adiw	r30, 0x05	; 5
	va_list arp;


	va_start(arp, fmt);
	xvprintf(fmt, arp);
 7f4:	81 91       	ld	r24, Z+
 7f6:	91 91       	ld	r25, Z+
 7f8:	bf 01       	movw	r22, r30
 7fa:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xvprintf>
	va_end(arp);
}
 7fe:	20 96       	adiw	r28, 0x00	; 0
 800:	e2 e0       	ldi	r30, 0x02	; 2
 802:	0c 94 c1 04 	jmp	0x982	; 0x982 <__epilogue_restores__+0x20>

00000806 <nrf24_setupPins>:
#define set_bit(reg,bit) reg |= (1<<bit)
#define clr_bit(reg,bit) reg &= ~(1<<bit)
#define check_bit(reg,bit) (reg&(1<<bit))

void nrf24_setupPins() {
    set_bit(DDRF,4); // CE output
 806:	84 9a       	sbi	0x10, 4	; 16
    set_bit(DDRF,5); // CSN output
 808:	85 9a       	sbi	0x10, 5	; 16
    set_bit(DDRF,6); // SCK output
 80a:	86 9a       	sbi	0x10, 6	; 16
    set_bit(DDRF,7); // MOSI output
 80c:	87 9a       	sbi	0x10, 7	; 16
    clr_bit(DDRC,7); // MISO input
 80e:	3f 98       	cbi	0x07, 7	; 7
}
 810:	08 95       	ret

00000812 <nrf24_ce_digitalWrite>:

void nrf24_ce_digitalWrite(uint8_t state) {
    if(state) {
 812:	88 23       	and	r24, r24
 814:	11 f0       	breq	.+4      	; 0x81a <nrf24_ce_digitalWrite+0x8>
        set_bit(PORTF,4);
 816:	8c 9a       	sbi	0x11, 4	; 17
 818:	08 95       	ret
    } else {
        clr_bit(PORTF,4);
 81a:	8c 98       	cbi	0x11, 4	; 17
 81c:	08 95       	ret

0000081e <nrf24_csn_digitalWrite>:
    }
}

void nrf24_csn_digitalWrite(uint8_t state) {
    if(state) {
 81e:	88 23       	and	r24, r24
 820:	11 f0       	breq	.+4      	; 0x826 <nrf24_csn_digitalWrite+0x8>
        set_bit(PORTF,5);
 822:	8d 9a       	sbi	0x11, 5	; 17
 824:	08 95       	ret
    } else {
        clr_bit(PORTF,5);
 826:	8d 98       	cbi	0x11, 5	; 17
 828:	08 95       	ret

0000082a <nrf24_sck_digitalWrite>:
    }
}

void nrf24_sck_digitalWrite(uint8_t state) {
    if(state) {
 82a:	88 23       	and	r24, r24
 82c:	11 f0       	breq	.+4      	; 0x832 <nrf24_sck_digitalWrite+0x8>
        set_bit(PORTF,6);
 82e:	8e 9a       	sbi	0x11, 6	; 17
 830:	08 95       	ret
    } else {
        clr_bit(PORTF,6);
 832:	8e 98       	cbi	0x11, 6	; 17
 834:	08 95       	ret

00000836 <nrf24_mosi_digitalWrite>:
    }
}

void nrf24_mosi_digitalWrite(uint8_t state) {
    if(state) {
 836:	88 23       	and	r24, r24
 838:	11 f0       	breq	.+4      	; 0x83e <nrf24_mosi_digitalWrite+0x8>
        set_bit(PORTF,7);
 83a:	8f 9a       	sbi	0x11, 7	; 17
 83c:	08 95       	ret
    } else {
        clr_bit(PORTF,7);
 83e:	8f 98       	cbi	0x11, 7	; 17
 840:	08 95       	ret

00000842 <nrf24_miso_digitalRead>:
    }
}

uint8_t nrf24_miso_digitalRead() {
    return check_bit(PINC,7);
 842:	86 b1       	in	r24, 0x06	; 6
}
 844:	80 78       	andi	r24, 0x80	; 128
 846:	08 95       	ret

00000848 <matrix_init>:
uint8_t matrix[ROWS];
uint8_t row_pin[ROWS] = {0,1,4,5,6};

/******************************************************************************/
void matrix_init(void) {
	DDRB = 0;
 848:	14 b8       	out	0x04, r1	; 4
	DDRD |= 0x73;
 84a:	8a b1       	in	r24, 0x0a	; 10
 84c:	83 67       	ori	r24, 0x73	; 115
 84e:	8a b9       	out	0x0a, r24	; 10
}
 850:	08 95       	ret

00000852 <matrix_scan>:

/******************************************************************************/
void matrix_scan(void) {
 852:	40 e0       	ldi	r20, 0x00	; 0
 854:	50 e0       	ldi	r21, 0x00	; 0
}

/******************************************************************************/
// Select the given row
void matrix_select_row(uint8_t r) {
    PORTD |= (1 << row_pin[r]);
 856:	61 e0       	ldi	r22, 0x01	; 1
 858:	70 e0       	ldi	r23, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 85a:	30 e5       	ldi	r19, 0x50	; 80
 85c:	2b b1       	in	r18, 0x0b	; 11
 85e:	fa 01       	movw	r30, r20
 860:	ec 5c       	subi	r30, 0xCC	; 204
 862:	fe 4f       	sbci	r31, 0xFE	; 254
 864:	cb 01       	movw	r24, r22
 866:	00 80       	ld	r0, Z
 868:	02 c0       	rjmp	.+4      	; 0x86e <matrix_scan+0x1c>
 86a:	88 0f       	add	r24, r24
 86c:	99 1f       	adc	r25, r25
 86e:	0a 94       	dec	r0
 870:	e2 f7       	brpl	.-8      	; 0x86a <matrix_scan+0x18>
 872:	28 2b       	or	r18, r24
 874:	2b b9       	out	0x0b, r18	; 11
 876:	83 2f       	mov	r24, r19
 878:	8a 95       	dec	r24
 87a:	f1 f7       	brne	.-4      	; 0x878 <matrix_scan+0x26>
    uint8_t i;

    for (i=0; i<ROWS; i++) {
        matrix_select_row(i);
        _delay_us(30);
        matrix[i] = PINB;
 87c:	83 b1       	in	r24, 0x03	; 3
 87e:	fa 01       	movw	r30, r20
 880:	e8 5b       	subi	r30, 0xB8	; 184
 882:	fe 4f       	sbci	r31, 0xFE	; 254
 884:	80 83       	st	Z, r24
}

/******************************************************************************/
// Deselect all rows
void matrix_deselect(void) {
    PORTD &= 0x8C;
 886:	8b b1       	in	r24, 0x0b	; 11
 888:	8c 78       	andi	r24, 0x8C	; 140
 88a:	8b b9       	out	0x0b, r24	; 11
 88c:	4f 5f       	subi	r20, 0xFF	; 255
 88e:	5f 4f       	sbci	r21, 0xFF	; 255
/******************************************************************************/
void matrix_scan(void) {

    uint8_t i;

    for (i=0; i<ROWS; i++) {
 890:	45 30       	cpi	r20, 0x05	; 5
 892:	51 05       	cpc	r21, r1
 894:	19 f7       	brne	.-58     	; 0x85c <matrix_scan+0xa>
        _delay_us(30);
        matrix[i] = PINB;
        matrix_deselect();
    }

}
 896:	08 95       	ret

00000898 <uart_init>:
#define uart_set_pin()        PORTD |= (1<<3)
#define uart_clr_pin()        PORTD &= ~(1<<3)
#define uart_bit_dly()        _delay_us(100)

void uart_init() {
    uart_pin_output();
 898:	53 9a       	sbi	0x0a, 3	; 10
}
 89a:	08 95       	ret

0000089c <uart_put_char>:
void uart_put_char(uint8_t tx) {
    uint8_t i;

    uart_clr_pin();
 89c:	5b 98       	cbi	0x0b, 3	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 89e:	e8 ec       	ldi	r30, 0xC8	; 200
 8a0:	f0 e0       	ldi	r31, 0x00	; 0
 8a2:	31 97       	sbiw	r30, 0x01	; 1
 8a4:	f1 f7       	brne	.-4      	; 0x8a2 <uart_put_char+0x6>
 8a6:	20 e0       	ldi	r18, 0x00	; 0
 8a8:	30 e0       	ldi	r19, 0x00	; 0
    uart_bit_dly();

    for (i=0;i<8;i++) {
        if (tx & (1<<i)) {
 8aa:	48 2f       	mov	r20, r24
 8ac:	50 e0       	ldi	r21, 0x00	; 0
 8ae:	68 ec       	ldi	r22, 0xC8	; 200
 8b0:	70 e0       	ldi	r23, 0x00	; 0
 8b2:	ca 01       	movw	r24, r20
 8b4:	02 2e       	mov	r0, r18
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <uart_put_char+0x20>
 8b8:	95 95       	asr	r25
 8ba:	87 95       	ror	r24
 8bc:	0a 94       	dec	r0
 8be:	e2 f7       	brpl	.-8      	; 0x8b8 <uart_put_char+0x1c>
 8c0:	80 ff       	sbrs	r24, 0
 8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <uart_put_char+0x2c>
            uart_set_pin();
 8c4:	5b 9a       	sbi	0x0b, 3	; 11
 8c6:	01 c0       	rjmp	.+2      	; 0x8ca <uart_put_char+0x2e>
        } else {
            uart_clr_pin();
 8c8:	5b 98       	cbi	0x0b, 3	; 11
 8ca:	cb 01       	movw	r24, r22
 8cc:	01 97       	sbiw	r24, 0x01	; 1
 8ce:	f1 f7       	brne	.-4      	; 0x8cc <uart_put_char+0x30>
 8d0:	2f 5f       	subi	r18, 0xFF	; 255
 8d2:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;

    uart_clr_pin();
    uart_bit_dly();

    for (i=0;i<8;i++) {
 8d4:	28 30       	cpi	r18, 0x08	; 8
 8d6:	31 05       	cpc	r19, r1
 8d8:	61 f7       	brne	.-40     	; 0x8b2 <uart_put_char+0x16>
        }

        uart_bit_dly();
    }

    uart_set_pin();
 8da:	5b 9a       	sbi	0x0b, 3	; 11
 8dc:	88 ec       	ldi	r24, 0xC8	; 200
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	01 97       	sbiw	r24, 0x01	; 1
 8e2:	f1 f7       	brne	.-4      	; 0x8e0 <uart_put_char+0x44>
    uart_bit_dly();
 8e4:	08 95       	ret

000008e6 <__udivmodsi4>:
 8e6:	a1 e2       	ldi	r26, 0x21	; 33
 8e8:	1a 2e       	mov	r1, r26
 8ea:	aa 1b       	sub	r26, r26
 8ec:	bb 1b       	sub	r27, r27
 8ee:	fd 01       	movw	r30, r26
 8f0:	0d c0       	rjmp	.+26     	; 0x90c <__udivmodsi4_ep>

000008f2 <__udivmodsi4_loop>:
 8f2:	aa 1f       	adc	r26, r26
 8f4:	bb 1f       	adc	r27, r27
 8f6:	ee 1f       	adc	r30, r30
 8f8:	ff 1f       	adc	r31, r31
 8fa:	a2 17       	cp	r26, r18
 8fc:	b3 07       	cpc	r27, r19
 8fe:	e4 07       	cpc	r30, r20
 900:	f5 07       	cpc	r31, r21
 902:	20 f0       	brcs	.+8      	; 0x90c <__udivmodsi4_ep>
 904:	a2 1b       	sub	r26, r18
 906:	b3 0b       	sbc	r27, r19
 908:	e4 0b       	sbc	r30, r20
 90a:	f5 0b       	sbc	r31, r21

0000090c <__udivmodsi4_ep>:
 90c:	66 1f       	adc	r22, r22
 90e:	77 1f       	adc	r23, r23
 910:	88 1f       	adc	r24, r24
 912:	99 1f       	adc	r25, r25
 914:	1a 94       	dec	r1
 916:	69 f7       	brne	.-38     	; 0x8f2 <__udivmodsi4_loop>
 918:	60 95       	com	r22
 91a:	70 95       	com	r23
 91c:	80 95       	com	r24
 91e:	90 95       	com	r25
 920:	9b 01       	movw	r18, r22
 922:	ac 01       	movw	r20, r24
 924:	bd 01       	movw	r22, r26
 926:	cf 01       	movw	r24, r30
 928:	08 95       	ret

0000092a <__prologue_saves__>:
 92a:	2f 92       	push	r2
 92c:	3f 92       	push	r3
 92e:	4f 92       	push	r4
 930:	5f 92       	push	r5
 932:	6f 92       	push	r6
 934:	7f 92       	push	r7
 936:	8f 92       	push	r8
 938:	9f 92       	push	r9
 93a:	af 92       	push	r10
 93c:	bf 92       	push	r11
 93e:	cf 92       	push	r12
 940:	df 92       	push	r13
 942:	ef 92       	push	r14
 944:	ff 92       	push	r15
 946:	0f 93       	push	r16
 948:	1f 93       	push	r17
 94a:	cf 93       	push	r28
 94c:	df 93       	push	r29
 94e:	cd b7       	in	r28, 0x3d	; 61
 950:	de b7       	in	r29, 0x3e	; 62
 952:	ca 1b       	sub	r28, r26
 954:	db 0b       	sbc	r29, r27
 956:	0f b6       	in	r0, 0x3f	; 63
 958:	f8 94       	cli
 95a:	de bf       	out	0x3e, r29	; 62
 95c:	0f be       	out	0x3f, r0	; 63
 95e:	cd bf       	out	0x3d, r28	; 61
 960:	09 94       	ijmp

00000962 <__epilogue_restores__>:
 962:	2a 88       	ldd	r2, Y+18	; 0x12
 964:	39 88       	ldd	r3, Y+17	; 0x11
 966:	48 88       	ldd	r4, Y+16	; 0x10
 968:	5f 84       	ldd	r5, Y+15	; 0x0f
 96a:	6e 84       	ldd	r6, Y+14	; 0x0e
 96c:	7d 84       	ldd	r7, Y+13	; 0x0d
 96e:	8c 84       	ldd	r8, Y+12	; 0x0c
 970:	9b 84       	ldd	r9, Y+11	; 0x0b
 972:	aa 84       	ldd	r10, Y+10	; 0x0a
 974:	b9 84       	ldd	r11, Y+9	; 0x09
 976:	c8 84       	ldd	r12, Y+8	; 0x08
 978:	df 80       	ldd	r13, Y+7	; 0x07
 97a:	ee 80       	ldd	r14, Y+6	; 0x06
 97c:	fd 80       	ldd	r15, Y+5	; 0x05
 97e:	0c 81       	ldd	r16, Y+4	; 0x04
 980:	1b 81       	ldd	r17, Y+3	; 0x03
 982:	aa 81       	ldd	r26, Y+2	; 0x02
 984:	b9 81       	ldd	r27, Y+1	; 0x01
 986:	ce 0f       	add	r28, r30
 988:	d1 1d       	adc	r29, r1
 98a:	0f b6       	in	r0, 0x3f	; 63
 98c:	f8 94       	cli
 98e:	de bf       	out	0x3e, r29	; 62
 990:	0f be       	out	0x3f, r0	; 63
 992:	cd bf       	out	0x3d, r28	; 61
 994:	ed 01       	movw	r28, r26
 996:	08 95       	ret

00000998 <_exit>:
 998:	f8 94       	cli

0000099a <__stop_program>:
 99a:	ff cf       	rjmp	.-2      	; 0x99a <__stop_program>
