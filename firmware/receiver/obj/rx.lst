
obj/rx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ae  00800100  00001074  00001108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001074  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  008001ae  008001ae  000011b6  2**0
                  ALLOC
  3 .debug_aranges 00000220  00000000  00000000  000011b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000048b  00000000  00000000  000013d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000168f  00000000  00000000  00001861  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008c8  00000000  00000000  00002ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000015d9  00000000  00000000  000037b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000360  00000000  00000000  00004d94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000705  00000000  00000000  000050f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000dd0  00000000  00000000  000057f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002c0  00000000  00000000  000065c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

/* Returns the payload length */
uint8_t nrf24_payload_length()
{
    return payload_len;
}
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>

void xfputs (					/* Put a string to the specified device */
	void(*func)(unsigned char),	/* Pointer to the output function */
	const char*	str				/* Pointer to the string */
)
{
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
}


// perform a single keystroke
int8_t usb_keyboard_press(uint8_t key, uint8_t modifier)
{
       8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__vector_10>
      2c:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__vector_11>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      44:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      48:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      4c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      7c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      84:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      8c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      90:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      94:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      98:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      9c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

000000ac <descriptor_list>:
      ac:	00 01 00 00 e3 00 12 00 02 00 00 f5 00 22 00 22     ............."."
      bc:	00 00 17 01 3f 00 21 00 00 07 01 09 00 03 00 00     ....?.!.........
      cc:	56 01 04 01 03 09 04 5a 01 0a 02 03 09 04 66 01     V......Z......f.
      dc:	10                                                  .

000000dd <endpoint_config_table>:
      dd:	00 00 01 c1 06 00                                   ......

000000e3 <device_descriptor>:
      e3:	12 01 00 02 00 00 00 20 c0 16 7c 04 00 01 01 02     ....... ..|.....
      f3:	00 01                                               ..

000000f5 <config1_descriptor>:
      f5:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
     105:	01 00 09 21 11 01 00 01 22 3f 00 07 05 83 03 08     ...!...."?......
     115:	00 01                                               ..

00000117 <keyboard_hid_report_desc>:
     117:	05 01 09 06 a1 01 75 01 95 08 05 07 19 e0 29 e7     ......u.......).
     127:	15 00 25 01 81 02 95 01 75 08 81 03 95 05 75 01     ..%.....u.....u.
     137:	05 08 19 01 29 05 91 02 95 01 75 03 91 03 95 06     ....).....u.....
     147:	75 08 15 00 25 68 05 07 19 00 29 68 81 00 c0        u...%h....)h...

00000156 <string0>:
     156:	04 03 09 04                                         ....

0000015a <string1>:
     15a:	0a 03 6b 00 73 00 72 00 6d 00 00 00                 ..k.s.r.m...

00000166 <string2>:
     166:	10 03 52 00 65 00 64 00 6f 00 78 00 20 00 31 00     ..R.e.d.o.x. .1.
	...

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	da e0       	ldi	r29, 0x0A	; 10
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	11 e0       	ldi	r17, 0x01	; 1
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	e4 e7       	ldi	r30, 0x74	; 116
     18c:	f0 e1       	ldi	r31, 0x10	; 16
     18e:	02 c0       	rjmp	.+4      	; 0x194 <.do_copy_data_start>

00000190 <.do_copy_data_loop>:
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0

00000194 <.do_copy_data_start>:
     194:	ae 3a       	cpi	r26, 0xAE	; 174
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <.do_copy_data_loop>

0000019a <__do_clear_bss>:
     19a:	11 e0       	ldi	r17, 0x01	; 1
     19c:	ae ea       	ldi	r26, 0xAE	; 174
     19e:	b1 e0       	ldi	r27, 0x01	; 1
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	ab 3c       	cpi	r26, 0xCB	; 203
     1a6:	b1 07       	cpc	r27, r17
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	0e 94 db 00 	call	0x1b6	; 0x1b6 <main>
     1ae:	0c 94 38 08 	jmp	0x1070	; 0x1070 <_exit>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <main>:
uint8_t msg[3];
uint8_t tx_address[5] = {0xD7,0xD7,0xD7,0xD7,0xD7};
uint8_t rx_address[5] = {0xBA,0x5E,0xBA,0x5E,0x00};

/******************************************************************************/
int main() {
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29

    uint8_t st;

    // Enable 3.3 V regulator to power the radio
    UHWCON |= (1<<UVREGE);  
     1ba:	80 91 d7 00 	lds	r24, 0x00D7
     1be:	81 60       	ori	r24, 0x01	; 1
     1c0:	80 93 d7 00 	sts	0x00D7, r24

    uart_init();
     1c4:	0e 94 b1 04 	call	0x962	; 0x962 <uart_init>
    xdev_out(uart_put_char);
     1c8:	83 eb       	ldi	r24, 0xB3	; 179
     1ca:	94 e0       	ldi	r25, 0x04	; 4
     1cc:	90 93 c0 01 	sts	0x01C0, r25
     1d0:	80 93 bf 01 	sts	0x01BF, r24

    xprintf("\r\nInitialising USB...\r\n");
     1d4:	00 d0       	rcall	.+0      	; 0x1d6 <main+0x20>
     1d6:	80 e0       	ldi	r24, 0x00	; 0
     1d8:	91 e0       	ldi	r25, 0x01	; 1
     1da:	ad b7       	in	r26, 0x3d	; 61
     1dc:	be b7       	in	r27, 0x3e	; 62
     1de:	12 96       	adiw	r26, 0x02	; 2
     1e0:	9c 93       	st	X, r25
     1e2:	8e 93       	st	-X, r24
     1e4:	11 97       	sbiw	r26, 0x01	; 1
     1e6:	0e 94 7f 04 	call	0x8fe	; 0x8fe <xprintf>
    usb_init();
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <usb_init>
    while (!usb_configured());
     1f2:	0e 94 ef 04 	call	0x9de	; 0x9de <usb_configured>
     1f6:	88 23       	and	r24, r24
     1f8:	e1 f3       	breq	.-8      	; 0x1f2 <main+0x3c>
     1fa:	80 e1       	ldi	r24, 0x10	; 16
     1fc:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1fe:	20 e9       	ldi	r18, 0x90	; 144
     200:	31 e0       	ldi	r19, 0x01	; 1
     202:	f9 01       	movw	r30, r18
     204:	31 97       	sbiw	r30, 0x01	; 1
     206:	f1 f7       	brne	.-4      	; 0x204 <main+0x4e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     208:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     20a:	d9 f7       	brne	.-10     	; 0x202 <main+0x4c>
    _delay_ms(1000);

    nrf24_init();
     20c:	0e 94 d6 02 	call	0x5ac	; 0x5ac <nrf24_init>
    nrf24_config(CHANNEL, sizeof msg);
     210:	82 e0       	ldi	r24, 0x02	; 2
     212:	63 e0       	ldi	r22, 0x03	; 3
     214:	0e 94 8a 02 	call	0x514	; 0x514 <nrf24_config>
    nrf24_tx_address(tx_address);
     218:	81 e5       	ldi	r24, 0x51	; 81
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <nrf24_tx_address>
    nrf24_rx_address(rx_address);
     220:	86 e5       	ldi	r24, 0x56	; 86
     222:	91 e0       	ldi	r25, 0x01	; 1
     224:	0e 94 c5 02 	call	0x58a	; 0x58a <nrf24_rx_address>

    xprintf("Ready\r\n");
     228:	00 d0       	rcall	.+0      	; 0x22a <main+0x74>
     22a:	88 e1       	ldi	r24, 0x18	; 24
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	ed b7       	in	r30, 0x3d	; 61
     230:	fe b7       	in	r31, 0x3e	; 62
     232:	92 83       	std	Z+2, r25	; 0x02
     234:	81 83       	std	Z+1, r24	; 0x01
     236:	0e 94 7f 04 	call	0x8fe	; 0x8fe <xprintf>
    st = nrf24_getStatus();
     23a:	0f 90       	pop	r0
     23c:	0f 90       	pop	r0
     23e:	0e 94 3f 02 	call	0x47e	; 0x47e <nrf24_getStatus>
    xprintf("status=%d\r\n", st);
     242:	00 d0       	rcall	.+0      	; 0x244 <main+0x8e>
     244:	00 d0       	rcall	.+0      	; 0x246 <main+0x90>
     246:	ed b7       	in	r30, 0x3d	; 61
     248:	fe b7       	in	r31, 0x3e	; 62
     24a:	31 96       	adiw	r30, 0x01	; 1
     24c:	20 e2       	ldi	r18, 0x20	; 32
     24e:	31 e0       	ldi	r19, 0x01	; 1
     250:	ad b7       	in	r26, 0x3d	; 61
     252:	be b7       	in	r27, 0x3e	; 62
     254:	12 96       	adiw	r26, 0x02	; 2
     256:	3c 93       	st	X, r19
     258:	2e 93       	st	-X, r18
     25a:	11 97       	sbiw	r26, 0x01	; 1
     25c:	82 83       	std	Z+2, r24	; 0x02
     25e:	13 82       	std	Z+3, r1	; 0x03
     260:	0e 94 7f 04 	call	0x8fe	; 0x8fe <xprintf>
     264:	0f 90       	pop	r0
     266:	0f 90       	pop	r0
     268:	0f 90       	pop	r0
     26a:	0f 90       	pop	r0

    while (1) {    
        if (nrf24_dataReady()) {
            nrf24_getData(msg);
            xprintf("got %d %d %d\r\n", msg[0], msg[1], msg[2]);
     26c:	cc e2       	ldi	r28, 0x2C	; 44
     26e:	d1 e0       	ldi	r29, 0x01	; 1
    xprintf("Ready\r\n");
    st = nrf24_getStatus();
    xprintf("status=%d\r\n", st);

    while (1) {    
        if (nrf24_dataReady()) {
     270:	0e 94 4d 02 	call	0x49a	; 0x49a <nrf24_dataReady>
     274:	88 23       	and	r24, r24
     276:	e1 f3       	breq	.-8      	; 0x270 <main+0xba>
            nrf24_getData(msg);
     278:	8b eb       	ldi	r24, 0xBB	; 187
     27a:	91 e0       	ldi	r25, 0x01	; 1
     27c:	0e 94 59 02 	call	0x4b2	; 0x4b2 <nrf24_getData>
            xprintf("got %d %d %d\r\n", msg[0], msg[1], msg[2]);
     280:	ed b7       	in	r30, 0x3d	; 61
     282:	fe b7       	in	r31, 0x3e	; 62
     284:	38 97       	sbiw	r30, 0x08	; 8
     286:	0f b6       	in	r0, 0x3f	; 63
     288:	f8 94       	cli
     28a:	fe bf       	out	0x3e, r31	; 62
     28c:	0f be       	out	0x3f, r0	; 63
     28e:	ed bf       	out	0x3d, r30	; 61
     290:	31 96       	adiw	r30, 0x01	; 1
     292:	ad b7       	in	r26, 0x3d	; 61
     294:	be b7       	in	r27, 0x3e	; 62
     296:	12 96       	adiw	r26, 0x02	; 2
     298:	dc 93       	st	X, r29
     29a:	ce 93       	st	-X, r28
     29c:	11 97       	sbiw	r26, 0x01	; 1
     29e:	80 91 bb 01 	lds	r24, 0x01BB
     2a2:	82 83       	std	Z+2, r24	; 0x02
     2a4:	13 82       	std	Z+3, r1	; 0x03
     2a6:	80 91 bc 01 	lds	r24, 0x01BC
     2aa:	84 83       	std	Z+4, r24	; 0x04
     2ac:	15 82       	std	Z+5, r1	; 0x05
     2ae:	80 91 bd 01 	lds	r24, 0x01BD
     2b2:	86 83       	std	Z+6, r24	; 0x06
     2b4:	17 82       	std	Z+7, r1	; 0x07
     2b6:	0e 94 7f 04 	call	0x8fe	; 0x8fe <xprintf>
            handle_row(msg[0], msg[1], msg[2]);
     2ba:	ed b7       	in	r30, 0x3d	; 61
     2bc:	fe b7       	in	r31, 0x3e	; 62
     2be:	38 96       	adiw	r30, 0x08	; 8
     2c0:	0f b6       	in	r0, 0x3f	; 63
     2c2:	f8 94       	cli
     2c4:	fe bf       	out	0x3e, r31	; 62
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	ed bf       	out	0x3d, r30	; 61
     2ca:	80 91 bb 01 	lds	r24, 0x01BB
     2ce:	60 91 bc 01 	lds	r22, 0x01BC
     2d2:	40 91 bd 01 	lds	r20, 0x01BD
     2d6:	0e 94 30 07 	call	0xe60	; 0xe60 <handle_row>
     2da:	ca cf       	rjmp	.-108    	; 0x270 <main+0xba>

000002dc <spi_transfer>:
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
}

/* software spi routine */
uint8_t spi_transfer(uint8_t tx)
{
     2dc:	ef 92       	push	r14
     2de:	ff 92       	push	r15
     2e0:	0f 93       	push	r16
     2e2:	1f 93       	push	r17
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	18 2f       	mov	r17, r24
    uint8_t i = 0;
    uint8_t rx = 0;    

    nrf24_sck_digitalWrite(LOW);
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	0e 94 a2 04 	call	0x944	; 0x944 <nrf24_sck_digitalWrite>
     2f0:	00 e0       	ldi	r16, 0x00	; 0
     2f2:	c7 e0       	ldi	r28, 0x07	; 7
     2f4:	d0 e0       	ldi	r29, 0x00	; 0

    for(i=0;i<8;i++)
    {

        if(tx & (1<<(7-i)))
     2f6:	e1 2e       	mov	r14, r17
     2f8:	ff 24       	eor	r15, r15
     2fa:	c7 01       	movw	r24, r14
     2fc:	0c 2e       	mov	r0, r28
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <spi_transfer+0x28>
     300:	95 95       	asr	r25
     302:	87 95       	ror	r24
     304:	0a 94       	dec	r0
     306:	e2 f7       	brpl	.-8      	; 0x300 <spi_transfer+0x24>
     308:	80 ff       	sbrs	r24, 0
     30a:	02 c0       	rjmp	.+4      	; 0x310 <spi_transfer+0x34>
        {
            nrf24_mosi_digitalWrite(HIGH);            
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	01 c0       	rjmp	.+2      	; 0x312 <spi_transfer+0x36>
        }
        else
        {
            nrf24_mosi_digitalWrite(LOW);
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	0e 94 a8 04 	call	0x950	; 0x950 <nrf24_mosi_digitalWrite>
        }

        nrf24_sck_digitalWrite(HIGH);        
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	0e 94 a2 04 	call	0x944	; 0x944 <nrf24_sck_digitalWrite>

        rx = rx << 1;
     31c:	00 0f       	add	r16, r16
        if(nrf24_miso_digitalRead())
     31e:	0e 94 ae 04 	call	0x95c	; 0x95c <nrf24_miso_digitalRead>
     322:	81 11       	cpse	r24, r1
        {
            rx |= 0x01;
     324:	01 60       	ori	r16, 0x01	; 1
        }

        nrf24_sck_digitalWrite(LOW);                
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	0e 94 a2 04 	call	0x944	; 0x944 <nrf24_sck_digitalWrite>
     32c:	21 97       	sbiw	r28, 0x01	; 1
    uint8_t i = 0;
    uint8_t rx = 0;    

    nrf24_sck_digitalWrite(LOW);

    for(i=0;i<8;i++)
     32e:	8f ef       	ldi	r24, 0xFF	; 255
     330:	cf 3f       	cpi	r28, 0xFF	; 255
     332:	d8 07       	cpc	r29, r24
     334:	11 f7       	brne	.-60     	; 0x2fa <spi_transfer+0x1e>
        nrf24_sck_digitalWrite(LOW);                

    }

    return rx;
}
     336:	80 2f       	mov	r24, r16
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
     33c:	e6 e0       	ldi	r30, 0x06	; 6
     33e:	0c 94 29 08 	jmp	0x1052	; 0x1052 <__epilogue_restores__+0x18>

00000342 <nrf24_configRegister>:

}

/* Clocks only one byte into the given nrf24 register */
void nrf24_configRegister(uint8_t reg, uint8_t value)
{
     342:	0f 93       	push	r16
     344:	1f 93       	push	r17
     346:	18 2f       	mov	r17, r24
     348:	06 2f       	mov	r16, r22
    nrf24_csn_digitalWrite(LOW);
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	0e 94 9c 04 	call	0x938	; 0x938 <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
     350:	1f 71       	andi	r17, 0x1F	; 31
     352:	81 2f       	mov	r24, r17
     354:	80 62       	ori	r24, 0x20	; 32
     356:	0e 94 6e 01 	call	0x2dc	; 0x2dc <spi_transfer>
    spi_transfer(value);
     35a:	80 2f       	mov	r24, r16
     35c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	0e 94 9c 04 	call	0x938	; 0x938 <nrf24_csn_digitalWrite>
}
     366:	1f 91       	pop	r17
     368:	0f 91       	pop	r16
     36a:	08 95       	ret

0000036c <nrf24_transmitSync>:

}

/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
     36c:	0f 93       	push	r16
     36e:	1f 93       	push	r17
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	06 2f       	mov	r16, r22
     376:	ec 01       	movw	r28, r24
     378:	10 e0       	ldi	r17, 0x00	; 0
     37a:	04 c0       	rjmp	.+8      	; 0x384 <nrf24_transmitSync+0x18>
    uint8_t i;
    
    for(i=0;i<len;i++)
    {
        spi_transfer(dataout[i]);
     37c:	89 91       	ld	r24, Y+
     37e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <spi_transfer>
/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
    uint8_t i;
    
    for(i=0;i<len;i++)
     382:	1f 5f       	subi	r17, 0xFF	; 255
     384:	10 17       	cp	r17, r16
     386:	d0 f3       	brcs	.-12     	; 0x37c <nrf24_transmitSync+0x10>
    {
        spi_transfer(dataout[i]);
    }

}
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	1f 91       	pop	r17
     38e:	0f 91       	pop	r16
     390:	08 95       	ret

00000392 <nrf24_writeRegister>:
    nrf24_csn_digitalWrite(HIGH);
}

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
{
     392:	ef 92       	push	r14
     394:	ff 92       	push	r15
     396:	0f 93       	push	r16
     398:	1f 93       	push	r17
     39a:	18 2f       	mov	r17, r24
     39c:	7b 01       	movw	r14, r22
     39e:	04 2f       	mov	r16, r20
    nrf24_csn_digitalWrite(LOW);
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	0e 94 9c 04 	call	0x938	; 0x938 <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
     3a6:	1f 71       	andi	r17, 0x1F	; 31
     3a8:	81 2f       	mov	r24, r17
     3aa:	80 62       	ori	r24, 0x20	; 32
     3ac:	0e 94 6e 01 	call	0x2dc	; 0x2dc <spi_transfer>
    nrf24_transmitSync(value,len);
     3b0:	c7 01       	movw	r24, r14
     3b2:	60 2f       	mov	r22, r16
     3b4:	0e 94 b6 01 	call	0x36c	; 0x36c <nrf24_transmitSync>
    nrf24_csn_digitalWrite(HIGH);
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	0e 94 9c 04 	call	0x938	; 0x938 <nrf24_csn_digitalWrite>
}
     3be:	1f 91       	pop	r17
     3c0:	0f 91       	pop	r16
     3c2:	ff 90       	pop	r15
     3c4:	ef 90       	pop	r14
     3c6:	08 95       	ret

000003c8 <nrf24_tx_address>:
    return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
     3c8:	0f 93       	push	r16
     3ca:	1f 93       	push	r17
     3cc:	8c 01       	movw	r16, r24
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
     3ce:	8a e0       	ldi	r24, 0x0A	; 10
     3d0:	b8 01       	movw	r22, r16
     3d2:	45 e0       	ldi	r20, 0x05	; 5
     3d4:	0e 94 c9 01 	call	0x392	; 0x392 <nrf24_writeRegister>
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
     3d8:	80 e1       	ldi	r24, 0x10	; 16
     3da:	b8 01       	movw	r22, r16
     3dc:	45 e0       	ldi	r20, 0x05	; 5
     3de:	0e 94 c9 01 	call	0x392	; 0x392 <nrf24_writeRegister>
}
     3e2:	1f 91       	pop	r17
     3e4:	0f 91       	pop	r16
     3e6:	08 95       	ret

000003e8 <nrf24_transferSync>:
    return rx;
}

/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
     3e8:	a0 e0       	ldi	r26, 0x00	; 0
     3ea:	b0 e0       	ldi	r27, 0x00	; 0
     3ec:	ea ef       	ldi	r30, 0xFA	; 250
     3ee:	f1 e0       	ldi	r31, 0x01	; 1
     3f0:	0c 94 0c 08 	jmp	0x1018	; 0x1018 <__prologue_saves__+0x16>
     3f4:	7b 01       	movw	r14, r22
     3f6:	d4 2e       	mov	r13, r20
     3f8:	8c 01       	movw	r16, r24
     3fa:	c0 e0       	ldi	r28, 0x00	; 0
     3fc:	d0 e0       	ldi	r29, 0x00	; 0
     3fe:	0a c0       	rjmp	.+20     	; 0x414 <nrf24_transferSync+0x2c>
    uint8_t i;

    for(i=0;i<len;i++)
    {
        datain[i] = spi_transfer(dataout[i]);
     400:	f8 01       	movw	r30, r16
     402:	81 91       	ld	r24, Z+
     404:	8f 01       	movw	r16, r30
     406:	0e 94 6e 01 	call	0x2dc	; 0x2dc <spi_transfer>
     40a:	f7 01       	movw	r30, r14
     40c:	ec 0f       	add	r30, r28
     40e:	fd 1f       	adc	r31, r29
     410:	80 83       	st	Z, r24
     412:	21 96       	adiw	r28, 0x01	; 1
/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
    uint8_t i;

    for(i=0;i<len;i++)
     414:	cd 15       	cp	r28, r13
     416:	a0 f3       	brcs	.-24     	; 0x400 <nrf24_transferSync+0x18>
    {
        datain[i] = spi_transfer(dataout[i]);
    }

}
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
     41c:	e7 e0       	ldi	r30, 0x07	; 7
     41e:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__epilogue_restores__+0x16>

00000422 <nrf24_readRegister>:
    nrf24_csn_digitalWrite(HIGH);
}

/* Read single register from nrf24 */
void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
     422:	ef 92       	push	r14
     424:	ff 92       	push	r15
     426:	0f 93       	push	r16
     428:	1f 93       	push	r17
     42a:	18 2f       	mov	r17, r24
     42c:	7b 01       	movw	r14, r22
     42e:	04 2f       	mov	r16, r20
    nrf24_csn_digitalWrite(LOW);
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	0e 94 9c 04 	call	0x938	; 0x938 <nrf24_csn_digitalWrite>
    spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
     436:	81 2f       	mov	r24, r17
     438:	8f 71       	andi	r24, 0x1F	; 31
     43a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <spi_transfer>
    nrf24_transferSync(value,value,len);
     43e:	c7 01       	movw	r24, r14
     440:	b7 01       	movw	r22, r14
     442:	40 2f       	mov	r20, r16
     444:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <nrf24_transferSync>
    nrf24_csn_digitalWrite(HIGH);
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	0e 94 9c 04 	call	0x938	; 0x938 <nrf24_csn_digitalWrite>
}
     44e:	1f 91       	pop	r17
     450:	0f 91       	pop	r16
     452:	ff 90       	pop	r15
     454:	ef 90       	pop	r14
     456:	08 95       	ret

00000458 <nrf24_rxFifoEmpty>:
    return !nrf24_rxFifoEmpty();;
}

/* Checks if receive FIFO is empty or not */
uint8_t nrf24_rxFifoEmpty()
{
     458:	a1 e0       	ldi	r26, 0x01	; 1
     45a:	b0 e0       	ldi	r27, 0x00	; 0
     45c:	e2 e3       	ldi	r30, 0x32	; 50
     45e:	f2 e0       	ldi	r31, 0x02	; 2
     460:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__prologue_saves__+0x20>
    uint8_t fifoStatus;

    nrf24_readRegister(FIFO_STATUS,&fifoStatus,1);
     464:	87 e1       	ldi	r24, 0x17	; 23
     466:	be 01       	movw	r22, r28
     468:	6f 5f       	subi	r22, 0xFF	; 255
     46a:	7f 4f       	sbci	r23, 0xFF	; 255
     46c:	41 e0       	ldi	r20, 0x01	; 1
     46e:	0e 94 11 02 	call	0x422	; 0x422 <nrf24_readRegister>
     472:	89 81       	ldd	r24, Y+1	; 0x01
    
    return (fifoStatus & (1 << RX_EMPTY));
}
     474:	81 70       	andi	r24, 0x01	; 1
     476:	21 96       	adiw	r28, 0x01	; 1
     478:	e2 e0       	ldi	r30, 0x02	; 2
     47a:	0c 94 2d 08 	jmp	0x105a	; 0x105a <__epilogue_restores__+0x20>

0000047e <nrf24_getStatus>:
    return 1; /* true */

}

uint8_t nrf24_getStatus()
{
     47e:	1f 93       	push	r17
    uint8_t rv;
    nrf24_csn_digitalWrite(LOW);
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	0e 94 9c 04 	call	0x938	; 0x938 <nrf24_csn_digitalWrite>
    rv = spi_transfer(NOP);
     486:	8f ef       	ldi	r24, 0xFF	; 255
     488:	0e 94 6e 01 	call	0x2dc	; 0x2dc <spi_transfer>
     48c:	18 2f       	mov	r17, r24
    nrf24_csn_digitalWrite(HIGH);
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	0e 94 9c 04 	call	0x938	; 0x938 <nrf24_csn_digitalWrite>
    return rv;
}
     494:	81 2f       	mov	r24, r17
     496:	1f 91       	pop	r17
     498:	08 95       	ret

0000049a <nrf24_dataReady>:
/* Checks if data is available for reading */
/* Returns 1 if data is ready ... */
uint8_t nrf24_dataReady() 
{
    // See note in getData() function - just checking RX_DR isn't good enough
    uint8_t status = nrf24_getStatus();
     49a:	0e 94 3f 02 	call	0x47e	; 0x47e <nrf24_getStatus>

    // We can short circuit on RX_DR, but if it's not set, we still need
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) ) 
     49e:	86 fd       	sbrc	r24, 6
     4a0:	05 c0       	rjmp	.+10     	; 0x4ac <nrf24_dataReady+0x12>
    {
        return 1;
    }

    return !nrf24_rxFifoEmpty();;
     4a2:	0e 94 2c 02 	call	0x458	; 0x458 <nrf24_rxFifoEmpty>
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	88 23       	and	r24, r24
     4aa:	09 f4       	brne	.+2      	; 0x4ae <nrf24_dataReady+0x14>
     4ac:	91 e0       	ldi	r25, 0x01	; 1
}
     4ae:	89 2f       	mov	r24, r25
     4b0:	08 95       	ret

000004b2 <nrf24_getData>:
    return status;
}

/* Reads payload bytes into data array */
void nrf24_getData(uint8_t* data) 
{
     4b2:	0f 93       	push	r16
     4b4:	1f 93       	push	r17
     4b6:	8c 01       	movw	r16, r24
    /* Pull down chip select */
    nrf24_csn_digitalWrite(LOW);                               
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	0e 94 9c 04 	call	0x938	; 0x938 <nrf24_csn_digitalWrite>

    /* Send cmd to read rx payload */
    spi_transfer( R_RX_PAYLOAD );
     4be:	81 e6       	ldi	r24, 0x61	; 97
     4c0:	0e 94 6e 01 	call	0x2dc	; 0x2dc <spi_transfer>
    
    /* Read payload */
    nrf24_transferSync(data,data,payload_len);
     4c4:	c8 01       	movw	r24, r16
     4c6:	b8 01       	movw	r22, r16
     4c8:	40 91 be 01 	lds	r20, 0x01BE
     4cc:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <nrf24_transferSync>
    
    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	0e 94 9c 04 	call	0x938	; 0x938 <nrf24_csn_digitalWrite>

    /* Reset status register */
    nrf24_configRegister(STATUS,(1<<RX_DR));   
     4d6:	87 e0       	ldi	r24, 0x07	; 7
     4d8:	60 e4       	ldi	r22, 0x40	; 64
     4da:	0e 94 a1 01 	call	0x342	; 0x342 <nrf24_configRegister>
}
     4de:	1f 91       	pop	r17
     4e0:	0f 91       	pop	r16
     4e2:	08 95       	ret

000004e4 <nrf24_powerUpRx>:
    }
}

void nrf24_powerUpRx()
{     
    nrf24_csn_digitalWrite(LOW);
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	0e 94 9c 04 	call	0x938	; 0x938 <nrf24_csn_digitalWrite>
    spi_transfer(FLUSH_RX);
     4ea:	82 ee       	ldi	r24, 0xE2	; 226
     4ec:	0e 94 6e 01 	call	0x2dc	; 0x2dc <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	0e 94 9c 04 	call	0x938	; 0x938 <nrf24_csn_digitalWrite>

    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
     4f6:	87 e0       	ldi	r24, 0x07	; 7
     4f8:	60 e7       	ldi	r22, 0x70	; 112
     4fa:	0e 94 a1 01 	call	0x342	; 0x342 <nrf24_configRegister>

    nrf24_ce_digitalWrite(LOW);    
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	0e 94 96 04 	call	0x92c	; 0x92c <nrf24_ce_digitalWrite>
    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));    
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	6f e0       	ldi	r22, 0x0F	; 15
     508:	0e 94 a1 01 	call	0x342	; 0x342 <nrf24_configRegister>
    nrf24_ce_digitalWrite(HIGH);
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	0e 94 96 04 	call	0x92c	; 0x92c <nrf24_ce_digitalWrite>
}
     512:	08 95       	ret

00000514 <nrf24_config>:
    nrf24_csn_digitalWrite(HIGH);    
}

/* configure the module */
void nrf24_config(uint8_t channel, uint8_t pay_length)
{
     514:	98 2f       	mov	r25, r24
    /* Use static payload length ... */
    payload_len = pay_length;
     516:	60 93 be 01 	sts	0x01BE, r22

    // Set RF channel
    nrf24_configRegister(RF_CH,channel);
     51a:	85 e0       	ldi	r24, 0x05	; 5
     51c:	69 2f       	mov	r22, r25
     51e:	0e 94 a1 01 	call	0x342	; 0x342 <nrf24_configRegister>

    // Set length of incoming payload 
    nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
     522:	81 e1       	ldi	r24, 0x11	; 17
     524:	60 e0       	ldi	r22, 0x00	; 0
     526:	0e 94 a1 01 	call	0x342	; 0x342 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P1, payload_len); // Data payload pipe
     52a:	82 e1       	ldi	r24, 0x12	; 18
     52c:	60 91 be 01 	lds	r22, 0x01BE
     530:	0e 94 a1 01 	call	0x342	; 0x342 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used 
     534:	83 e1       	ldi	r24, 0x13	; 19
     536:	60 e0       	ldi	r22, 0x00	; 0
     538:	0e 94 a1 01 	call	0x342	; 0x342 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used 
     53c:	84 e1       	ldi	r24, 0x14	; 20
     53e:	60 e0       	ldi	r22, 0x00	; 0
     540:	0e 94 a1 01 	call	0x342	; 0x342 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used 
     544:	85 e1       	ldi	r24, 0x15	; 21
     546:	60 e0       	ldi	r22, 0x00	; 0
     548:	0e 94 a1 01 	call	0x342	; 0x342 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used 
     54c:	86 e1       	ldi	r24, 0x16	; 22
     54e:	60 e0       	ldi	r22, 0x00	; 0
     550:	0e 94 a1 01 	call	0x342	; 0x342 <nrf24_configRegister>

    // 1 Mbps, TX gain: 0dbm
    nrf24_configRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR));
     554:	86 e0       	ldi	r24, 0x06	; 6
     556:	66 e0       	ldi	r22, 0x06	; 6
     558:	0e 94 a1 01 	call	0x342	; 0x342 <nrf24_configRegister>

    // CRC enable, 1 byte CRC length
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	6c e0       	ldi	r22, 0x0C	; 12
     560:	0e 94 a1 01 	call	0x342	; 0x342 <nrf24_configRegister>

    // Auto Acknowledgment
    nrf24_configRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5));
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	63 e0       	ldi	r22, 0x03	; 3
     568:	0e 94 a1 01 	call	0x342	; 0x342 <nrf24_configRegister>

    // Enable RX addresses
    nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0<<ERX_P5));
     56c:	82 e0       	ldi	r24, 0x02	; 2
     56e:	63 e0       	ldi	r22, 0x03	; 3
     570:	0e 94 a1 01 	call	0x342	; 0x342 <nrf24_configRegister>

    // Auto retransmit delay: 1000 us and Up to 15 retransmit trials
    nrf24_configRegister(SETUP_RETR,(0x03<<ARD)|(0x0F<<ARC));
     574:	84 e0       	ldi	r24, 0x04	; 4
     576:	6f e3       	ldi	r22, 0x3F	; 63
     578:	0e 94 a1 01 	call	0x342	; 0x342 <nrf24_configRegister>

    // Dynamic length configurations: No dynamic length
    nrf24_configRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5));
     57c:	8c e1       	ldi	r24, 0x1C	; 28
     57e:	60 e0       	ldi	r22, 0x00	; 0
     580:	0e 94 a1 01 	call	0x342	; 0x342 <nrf24_configRegister>

    // Start listening
    nrf24_powerUpRx();
     584:	0e 94 72 02 	call	0x4e4	; 0x4e4 <nrf24_powerUpRx>
}
     588:	08 95       	ret

0000058a <nrf24_rx_address>:

/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) 
{
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	8c 01       	movw	r16, r24
    nrf24_ce_digitalWrite(LOW);
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	0e 94 96 04 	call	0x92c	; 0x92c <nrf24_ce_digitalWrite>
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
     596:	8b e0       	ldi	r24, 0x0B	; 11
     598:	b8 01       	movw	r22, r16
     59a:	45 e0       	ldi	r20, 0x05	; 5
     59c:	0e 94 c9 01 	call	0x392	; 0x392 <nrf24_writeRegister>
    nrf24_ce_digitalWrite(HIGH);
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	0e 94 96 04 	call	0x92c	; 0x92c <nrf24_ce_digitalWrite>
}
     5a6:	1f 91       	pop	r17
     5a8:	0f 91       	pop	r16
     5aa:	08 95       	ret

000005ac <nrf24_init>:
uint8_t payload_len;

/* init the hardware pins */
void nrf24_init() 
{
    nrf24_setupPins();
     5ac:	0e 94 90 04 	call	0x920	; 0x920 <nrf24_setupPins>
    nrf24_ce_digitalWrite(LOW);
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	0e 94 96 04 	call	0x92c	; 0x92c <nrf24_ce_digitalWrite>
    nrf24_csn_digitalWrite(HIGH);    
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	0e 94 9c 04 	call	0x938	; 0x938 <nrf24_csn_digitalWrite>
}
     5bc:	08 95       	ret

000005be <xputc>:

void xputc (char c)
{
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */

	if (outptr) {
     5be:	e0 91 ae 01 	lds	r30, 0x01AE
     5c2:	f0 91 af 01 	lds	r31, 0x01AF
     5c6:	30 97       	sbiw	r30, 0x00	; 0
     5c8:	31 f0       	breq	.+12     	; 0x5d6 <xputc+0x18>
		*outptr++ = (unsigned char)c;
     5ca:	81 93       	st	Z+, r24
     5cc:	f0 93 af 01 	sts	0x01AF, r31
     5d0:	e0 93 ae 01 	sts	0x01AE, r30
     5d4:	08 95       	ret
		return;
	}

	if (xfunc_out) xfunc_out((unsigned char)c);
     5d6:	e0 91 bf 01 	lds	r30, 0x01BF
     5da:	f0 91 c0 01 	lds	r31, 0x01C0
     5de:	30 97       	sbiw	r30, 0x00	; 0
     5e0:	09 f0       	breq	.+2      	; 0x5e4 <xputc+0x26>
     5e2:	09 95       	icall
     5e4:	08 95       	ret

000005e6 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	ec 01       	movw	r28, r24
     5ec:	03 c0       	rjmp	.+6      	; 0x5f4 <xputs+0xe>
	while (*str)
		xputc(*str++);
     5ee:	21 96       	adiw	r28, 0x01	; 1
     5f0:	0e 94 df 02 	call	0x5be	; 0x5be <xputc>

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
	while (*str)
     5f4:	88 81       	ld	r24, Y
     5f6:	88 23       	and	r24, r24
     5f8:	d1 f7       	brne	.-12     	; 0x5ee <xputs+0x8>
		xputc(*str++);
}
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	08 95       	ret

00000600 <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
     600:	a4 e1       	ldi	r26, 0x14	; 20
     602:	b0 e0       	ldi	r27, 0x00	; 0
     604:	e6 e0       	ldi	r30, 0x06	; 6
     606:	f3 e0       	ldi	r31, 0x03	; 3
     608:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__prologue_saves__>
     60c:	2c 01       	movw	r4, r24
     60e:	7b 01       	movw	r14, r22
     610:	04 c0       	rjmp	.+8      	; 0x61a <xvprintf+0x1a>
		if (!c) break;				/* End of format? */
		d = c;
		if (d >= 'a') d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, char*);
     612:	82 e0       	ldi	r24, 0x02	; 2
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	e8 0e       	add	r14, r24
     618:	f9 1e       	adc	r15, r25
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
     61a:	d2 01       	movw	r26, r4
     61c:	8c 91       	ld	r24, X
		if (!c) break;				/* End of format? */
     61e:	88 23       	and	r24, r24
     620:	09 f4       	brne	.+2      	; 0x624 <xvprintf+0x24>
     622:	69 c1       	rjmp	.+722    	; 0x8f6 <xvprintf+0x2f6>
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
     624:	08 94       	sec
     626:	41 1c       	adc	r4, r1
     628:	51 1c       	adc	r5, r1
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass through it if not a % sequense */
     62a:	85 32       	cpi	r24, 0x25	; 37
     62c:	09 f0       	breq	.+2      	; 0x630 <xvprintf+0x30>
     62e:	a6 c0       	rjmp	.+332    	; 0x77c <xvprintf+0x17c>
			xputc(c); continue;
		}
		f = 0;
		c = *fmt++;					/* Get first char of the sequense */
     630:	f2 01       	movw	r30, r4
     632:	b1 90       	ld	r11, Z+
     634:	2f 01       	movw	r4, r30
		if (c == '0') {				/* Flag: '0' padded */
     636:	f0 e3       	ldi	r31, 0x30	; 48
     638:	bf 16       	cp	r11, r31
     63a:	39 f4       	brne	.+14     	; 0x64a <xvprintf+0x4a>
			f = 1; c = *fmt++;
     63c:	d2 01       	movw	r26, r4
     63e:	bd 90       	ld	r11, X+
     640:	2d 01       	movw	r4, r26
     642:	f1 e0       	ldi	r31, 0x01	; 1
     644:	8f 2e       	mov	r8, r31
     646:	91 2c       	mov	r9, r1
     648:	0c c0       	rjmp	.+24     	; 0x662 <xvprintf+0x62>
		} else {
			if (c == '-') {			/* Flag: left justified */
     64a:	bd e2       	ldi	r27, 0x2D	; 45
     64c:	bb 16       	cp	r11, r27
     64e:	19 f0       	breq	.+6      	; 0x656 <xvprintf+0x56>
     650:	88 24       	eor	r8, r8
     652:	99 24       	eor	r9, r9
     654:	06 c0       	rjmp	.+12     	; 0x662 <xvprintf+0x62>
				f = 2; c = *fmt++;
     656:	f2 01       	movw	r30, r4
     658:	b1 90       	ld	r11, Z+
     65a:	2f 01       	movw	r4, r30
     65c:	e2 e0       	ldi	r30, 0x02	; 2
     65e:	8e 2e       	mov	r8, r30
     660:	91 2c       	mov	r9, r1
     662:	66 24       	eor	r6, r6
     664:	77 24       	eor	r7, r7
     666:	17 c0       	rjmp	.+46     	; 0x696 <xvprintf+0x96>
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
			w = w * 10 + c - '0';
     668:	c3 01       	movw	r24, r6
     66a:	73 e0       	ldi	r23, 0x03	; 3
     66c:	88 0f       	add	r24, r24
     66e:	99 1f       	adc	r25, r25
     670:	7a 95       	dec	r23
     672:	e1 f7       	brne	.-8      	; 0x66c <xvprintf+0x6c>
     674:	66 0c       	add	r6, r6
     676:	77 1c       	adc	r7, r7
     678:	68 0e       	add	r6, r24
     67a:	79 1e       	adc	r7, r25
     67c:	8b 2d       	mov	r24, r11
     67e:	99 27       	eor	r25, r25
     680:	87 fd       	sbrc	r24, 7
     682:	90 95       	com	r25
     684:	68 0e       	add	r6, r24
     686:	79 1e       	adc	r7, r25
     688:	80 ed       	ldi	r24, 0xD0	; 208
     68a:	9f ef       	ldi	r25, 0xFF	; 255
     68c:	68 0e       	add	r6, r24
     68e:	79 1e       	adc	r7, r25
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
     690:	d2 01       	movw	r26, r4
     692:	bd 90       	ld	r11, X+
     694:	2d 01       	movw	r4, r26
     696:	8b 2d       	mov	r24, r11
     698:	80 53       	subi	r24, 0x30	; 48
     69a:	8a 30       	cpi	r24, 0x0A	; 10
     69c:	28 f3       	brcs	.-54     	; 0x668 <xvprintf+0x68>
			w = w * 10 + c - '0';
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
     69e:	bc e6       	ldi	r27, 0x6C	; 108
     6a0:	bb 16       	cp	r11, r27
     6a2:	19 f0       	breq	.+6      	; 0x6aa <xvprintf+0xaa>
     6a4:	ec e4       	ldi	r30, 0x4C	; 76
     6a6:	be 16       	cp	r11, r30
     6a8:	39 f4       	brne	.+14     	; 0x6b8 <xvprintf+0xb8>
			f |= 4; c = *fmt++;
     6aa:	84 e0       	ldi	r24, 0x04	; 4
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	88 2a       	or	r8, r24
     6b0:	99 2a       	or	r9, r25
     6b2:	d2 01       	movw	r26, r4
     6b4:	bd 90       	ld	r11, X+
     6b6:	2d 01       	movw	r4, r26
		}
		if (!c) break;				/* End of format? */
     6b8:	bb 20       	and	r11, r11
     6ba:	09 f4       	brne	.+2      	; 0x6be <xvprintf+0xbe>
     6bc:	1c c1       	rjmp	.+568    	; 0x8f6 <xvprintf+0x2f6>
		d = c;
		if (d >= 'a') d -= 0x20;
     6be:	b0 e6       	ldi	r27, 0x60	; 96
     6c0:	bb 15       	cp	r27, r11
     6c2:	14 f0       	brlt	.+4      	; 0x6c8 <xvprintf+0xc8>
     6c4:	eb 2d       	mov	r30, r11
     6c6:	02 c0       	rjmp	.+4      	; 0x6cc <xvprintf+0xcc>
     6c8:	eb 2d       	mov	r30, r11
     6ca:	e0 52       	subi	r30, 0x20	; 32
		switch (d) {				/* Type is... */
     6cc:	ef 34       	cpi	r30, 0x4F	; 79
     6ce:	a1 f0       	breq	.+40     	; 0x6f8 <xvprintf+0xf8>
     6d0:	e0 35       	cpi	r30, 0x50	; 80
     6d2:	4c f4       	brge	.+18     	; 0x6e6 <xvprintf+0xe6>
     6d4:	e3 34       	cpi	r30, 0x43	; 67
     6d6:	09 f4       	brne	.+2      	; 0x6da <xvprintf+0xda>
     6d8:	44 c0       	rjmp	.+136    	; 0x762 <xvprintf+0x162>
     6da:	e4 34       	cpi	r30, 0x44	; 68
     6dc:	81 f0       	breq	.+32     	; 0x6fe <xvprintf+0xfe>
     6de:	e2 34       	cpi	r30, 0x42	; 66
     6e0:	09 f0       	breq	.+2      	; 0x6e4 <xvprintf+0xe4>
     6e2:	4b c0       	rjmp	.+150    	; 0x77a <xvprintf+0x17a>
     6e4:	4e c0       	rjmp	.+156    	; 0x782 <xvprintf+0x182>
     6e6:	e5 35       	cpi	r30, 0x55	; 85
     6e8:	51 f0       	breq	.+20     	; 0x6fe <xvprintf+0xfe>
     6ea:	e8 35       	cpi	r30, 0x58	; 88
     6ec:	09 f4       	brne	.+2      	; 0x6f0 <xvprintf+0xf0>
     6ee:	42 c0       	rjmp	.+132    	; 0x774 <xvprintf+0x174>
     6f0:	e3 35       	cpi	r30, 0x53	; 83
     6f2:	09 f0       	breq	.+2      	; 0x6f6 <xvprintf+0xf6>
     6f4:	42 c0       	rjmp	.+132    	; 0x77a <xvprintf+0x17a>
     6f6:	06 c0       	rjmp	.+12     	; 0x704 <xvprintf+0x104>
     6f8:	28 e0       	ldi	r18, 0x08	; 8
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	44 c0       	rjmp	.+136    	; 0x786 <xvprintf+0x186>
     6fe:	2a e0       	ldi	r18, 0x0A	; 10
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	41 c0       	rjmp	.+130    	; 0x786 <xvprintf+0x186>
		case 'S' :					/* String */
			p = va_arg(arp, char*);
     704:	f7 01       	movw	r30, r14
     706:	a0 80       	ld	r10, Z
     708:	b1 80       	ldd	r11, Z+1	; 0x01
     70a:	00 e0       	ldi	r16, 0x00	; 0
     70c:	10 e0       	ldi	r17, 0x00	; 0
     70e:	02 c0       	rjmp	.+4      	; 0x714 <xvprintf+0x114>
			for (j = 0; p[j]; j++) ;
     710:	0f 5f       	subi	r16, 0xFF	; 255
     712:	1f 4f       	sbci	r17, 0xFF	; 255
     714:	f5 01       	movw	r30, r10
     716:	e0 0f       	add	r30, r16
     718:	f1 1f       	adc	r31, r17
     71a:	80 81       	ld	r24, Z
     71c:	88 23       	and	r24, r24
     71e:	c1 f7       	brne	.-16     	; 0x710 <xvprintf+0x110>
     720:	04 c0       	rjmp	.+8      	; 0x72a <xvprintf+0x12a>
			while (!(f & 2) && j++ < w) xputc(' ');
     722:	80 e2       	ldi	r24, 0x20	; 32
     724:	0e 94 df 02 	call	0x5be	; 0x5be <xputc>
     728:	05 c0       	rjmp	.+10     	; 0x734 <xvprintf+0x134>
     72a:	52 e0       	ldi	r21, 0x02	; 2
     72c:	c5 2e       	mov	r12, r21
     72e:	d1 2c       	mov	r13, r1
     730:	c8 20       	and	r12, r8
     732:	d9 20       	and	r13, r9
     734:	c1 14       	cp	r12, r1
     736:	d1 04       	cpc	r13, r1
     738:	39 f4       	brne	.+14     	; 0x748 <xvprintf+0x148>
     73a:	0f 5f       	subi	r16, 0xFF	; 255
     73c:	1f 4f       	sbci	r17, 0xFF	; 255
     73e:	c8 01       	movw	r24, r16
     740:	01 97       	sbiw	r24, 0x01	; 1
     742:	86 15       	cp	r24, r6
     744:	97 05       	cpc	r25, r7
     746:	68 f3       	brcs	.-38     	; 0x722 <xvprintf+0x122>
			xputs(p);
     748:	c5 01       	movw	r24, r10
     74a:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <xputs>
     74e:	05 c0       	rjmp	.+10     	; 0x75a <xvprintf+0x15a>
			while (j++ < w) xputc(' ');
     750:	80 e2       	ldi	r24, 0x20	; 32
     752:	0e 94 df 02 	call	0x5be	; 0x5be <xputc>
     756:	0f 5f       	subi	r16, 0xFF	; 255
     758:	1f 4f       	sbci	r17, 0xFF	; 255
     75a:	06 15       	cp	r16, r6
     75c:	17 05       	cpc	r17, r7
     75e:	c0 f3       	brcs	.-16     	; 0x750 <xvprintf+0x150>
     760:	58 cf       	rjmp	.-336    	; 0x612 <xvprintf+0x12>
			continue;
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
     762:	87 01       	movw	r16, r14
     764:	0e 5f       	subi	r16, 0xFE	; 254
     766:	1f 4f       	sbci	r17, 0xFF	; 255
     768:	d7 01       	movw	r26, r14
     76a:	8c 91       	ld	r24, X
     76c:	0e 94 df 02 	call	0x5be	; 0x5be <xputc>
     770:	78 01       	movw	r14, r16
     772:	53 cf       	rjmp	.-346    	; 0x61a <xvprintf+0x1a>
     774:	20 e1       	ldi	r18, 0x10	; 16
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	06 c0       	rjmp	.+12     	; 0x786 <xvprintf+0x186>
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
     77a:	8b 2d       	mov	r24, r11
     77c:	0e 94 df 02 	call	0x5be	; 0x5be <xputc>
     780:	4c cf       	rjmp	.-360    	; 0x61a <xvprintf+0x1a>
     782:	22 e0       	ldi	r18, 0x02	; 2
     784:	30 e0       	ldi	r19, 0x00	; 0
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
     786:	82 fe       	sbrs	r8, 2
     788:	0d c0       	rjmp	.+26     	; 0x7a4 <xvprintf+0x1a4>
     78a:	44 e0       	ldi	r20, 0x04	; 4
     78c:	24 2e       	mov	r2, r20
     78e:	31 2c       	mov	r3, r1
     790:	2e 0c       	add	r2, r14
     792:	3f 1c       	adc	r3, r15
     794:	d7 01       	movw	r26, r14
     796:	ed 90       	ld	r14, X+
     798:	fd 90       	ld	r15, X+
     79a:	0d 91       	ld	r16, X+
     79c:	1c 91       	ld	r17, X
		if (d == 'D' && (v & 0x80000000)) {
     79e:	e4 34       	cpi	r30, 0x44	; 68
     7a0:	11 f5       	brne	.+68     	; 0x7e6 <xvprintf+0x1e6>
     7a2:	13 c0       	rjmp	.+38     	; 0x7ca <xvprintf+0x1ca>
     7a4:	c7 01       	movw	r24, r14
     7a6:	02 96       	adiw	r24, 0x02	; 2
     7a8:	d7 01       	movw	r26, r14
     7aa:	6d 91       	ld	r22, X+
     7ac:	7c 91       	ld	r23, X
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
     7ae:	e4 34       	cpi	r30, 0x44	; 68
     7b0:	39 f4       	brne	.+14     	; 0x7c0 <xvprintf+0x1c0>
     7b2:	1c 01       	movw	r2, r24
     7b4:	7b 01       	movw	r14, r22
     7b6:	00 27       	eor	r16, r16
     7b8:	f7 fc       	sbrc	r15, 7
     7ba:	00 95       	com	r16
     7bc:	10 2f       	mov	r17, r16
     7be:	05 c0       	rjmp	.+10     	; 0x7ca <xvprintf+0x1ca>
     7c0:	1c 01       	movw	r2, r24
     7c2:	7b 01       	movw	r14, r22
     7c4:	00 e0       	ldi	r16, 0x00	; 0
     7c6:	10 e0       	ldi	r17, 0x00	; 0
     7c8:	0e c0       	rjmp	.+28     	; 0x7e6 <xvprintf+0x1e6>
		if (d == 'D' && (v & 0x80000000)) {
     7ca:	17 ff       	sbrs	r17, 7
     7cc:	0c c0       	rjmp	.+24     	; 0x7e6 <xvprintf+0x1e6>
			v = 0 - v;
     7ce:	10 95       	com	r17
     7d0:	00 95       	com	r16
     7d2:	f0 94       	com	r15
     7d4:	e0 94       	com	r14
     7d6:	e1 1c       	adc	r14, r1
     7d8:	f1 1c       	adc	r15, r1
     7da:	01 1d       	adc	r16, r1
     7dc:	11 1d       	adc	r17, r1
			f |= 8;
     7de:	e8 e0       	ldi	r30, 0x08	; 8
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	8e 2a       	or	r8, r30
     7e4:	9f 2a       	or	r9, r31
     7e6:	cc 24       	eor	r12, r12
     7e8:	dd 24       	eor	r13, r13
		}
		i = 0;
		do {
			d = (char)(v % r); v /= r;
     7ea:	c9 01       	movw	r24, r18
     7ec:	a0 e0       	ldi	r26, 0x00	; 0
     7ee:	b0 e0       	ldi	r27, 0x00	; 0
     7f0:	89 8b       	std	Y+17, r24	; 0x11
     7f2:	9a 8b       	std	Y+18, r25	; 0x12
     7f4:	ab 8b       	std	Y+19, r26	; 0x13
     7f6:	bc 8b       	std	Y+20, r27	; 0x14
     7f8:	c8 01       	movw	r24, r16
     7fa:	b7 01       	movw	r22, r14
     7fc:	29 89       	ldd	r18, Y+17	; 0x11
     7fe:	3a 89       	ldd	r19, Y+18	; 0x12
     800:	4b 89       	ldd	r20, Y+19	; 0x13
     802:	5c 89       	ldd	r21, Y+20	; 0x14
     804:	0e 94 df 07 	call	0xfbe	; 0xfbe <__udivmodsi4>
     808:	a6 2e       	mov	r10, r22
     80a:	c8 01       	movw	r24, r16
     80c:	b7 01       	movw	r22, r14
     80e:	29 89       	ldd	r18, Y+17	; 0x11
     810:	3a 89       	ldd	r19, Y+18	; 0x12
     812:	4b 89       	ldd	r20, Y+19	; 0x13
     814:	5c 89       	ldd	r21, Y+20	; 0x14
     816:	0e 94 df 07 	call	0xfbe	; 0xfbe <__udivmodsi4>
     81a:	c9 01       	movw	r24, r18
     81c:	da 01       	movw	r26, r20
     81e:	7c 01       	movw	r14, r24
     820:	8d 01       	movw	r16, r26
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
     822:	e9 e0       	ldi	r30, 0x09	; 9
     824:	ea 15       	cp	r30, r10
     826:	3c f4       	brge	.+14     	; 0x836 <xvprintf+0x236>
     828:	f8 e7       	ldi	r31, 0x78	; 120
     82a:	bf 16       	cp	r11, r31
     82c:	11 f0       	breq	.+4      	; 0x832 <xvprintf+0x232>
     82e:	27 e0       	ldi	r18, 0x07	; 7
     830:	01 c0       	rjmp	.+2      	; 0x834 <xvprintf+0x234>
     832:	27 e2       	ldi	r18, 0x27	; 39
     834:	a2 0e       	add	r10, r18
			s[i++] = d + '0';
     836:	e1 e0       	ldi	r30, 0x01	; 1
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	ec 0f       	add	r30, r28
     83c:	fd 1f       	adc	r31, r29
     83e:	ec 0d       	add	r30, r12
     840:	fd 1d       	adc	r31, r13
     842:	20 e3       	ldi	r18, 0x30	; 48
     844:	a2 0e       	add	r10, r18
     846:	a0 82       	st	Z, r10
     848:	08 94       	sec
     84a:	c1 1c       	adc	r12, r1
     84c:	d1 1c       	adc	r13, r1
		} while (v && i < sizeof(s));
     84e:	00 97       	sbiw	r24, 0x00	; 0
     850:	a1 05       	cpc	r26, r1
     852:	b1 05       	cpc	r27, r1
     854:	21 f0       	breq	.+8      	; 0x85e <xvprintf+0x25e>
     856:	80 e1       	ldi	r24, 0x10	; 16
     858:	c8 16       	cp	r12, r24
     85a:	d1 04       	cpc	r13, r1
     85c:	69 f6       	brne	.-102    	; 0x7f8 <xvprintf+0x1f8>
     85e:	86 01       	movw	r16, r12
		if (f & 8) s[i++] = '-';
     860:	83 fe       	sbrs	r8, 3
     862:	0a c0       	rjmp	.+20     	; 0x878 <xvprintf+0x278>
     864:	e1 e0       	ldi	r30, 0x01	; 1
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	ec 0f       	add	r30, r28
     86a:	fd 1f       	adc	r31, r29
     86c:	ec 0d       	add	r30, r12
     86e:	fd 1d       	adc	r31, r13
     870:	9d e2       	ldi	r25, 0x2D	; 45
     872:	90 83       	st	Z, r25
     874:	0f 5f       	subi	r16, 0xFF	; 255
     876:	1f 4f       	sbci	r17, 0xFF	; 255
		j = i; d = (f & 1) ? '0' : ' ';
     878:	80 fc       	sbrc	r8, 0
     87a:	03 c0       	rjmp	.+6      	; 0x882 <xvprintf+0x282>
     87c:	30 e2       	ldi	r19, 0x20	; 32
     87e:	b3 2e       	mov	r11, r19
     880:	02 c0       	rjmp	.+4      	; 0x886 <xvprintf+0x286>
     882:	20 e3       	ldi	r18, 0x30	; 48
     884:	b2 2e       	mov	r11, r18
     886:	68 01       	movw	r12, r16
		while (!(f & 2) && j++ < w) xputc(d);
     888:	92 e0       	ldi	r25, 0x02	; 2
     88a:	e9 2e       	mov	r14, r25
     88c:	f1 2c       	mov	r15, r1
     88e:	e8 20       	and	r14, r8
     890:	f9 20       	and	r15, r9
     892:	03 c0       	rjmp	.+6      	; 0x89a <xvprintf+0x29a>
     894:	8b 2d       	mov	r24, r11
     896:	0e 94 df 02 	call	0x5be	; 0x5be <xputc>
     89a:	e1 14       	cp	r14, r1
     89c:	f1 04       	cpc	r15, r1
     89e:	41 f4       	brne	.+16     	; 0x8b0 <xvprintf+0x2b0>
     8a0:	08 94       	sec
     8a2:	c1 1c       	adc	r12, r1
     8a4:	d1 1c       	adc	r13, r1
     8a6:	c6 01       	movw	r24, r12
     8a8:	01 97       	sbiw	r24, 0x01	; 1
     8aa:	86 15       	cp	r24, r6
     8ac:	97 05       	cpc	r25, r7
     8ae:	90 f3       	brcs	.-28     	; 0x894 <xvprintf+0x294>
     8b0:	01 50       	subi	r16, 0x01	; 1
     8b2:	10 40       	sbci	r17, 0x00	; 0
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	e8 2e       	mov	r14, r24
     8b8:	f1 2c       	mov	r15, r1
     8ba:	ec 0e       	add	r14, r28
     8bc:	fd 1e       	adc	r15, r29
     8be:	e0 0e       	add	r14, r16
     8c0:	f1 1e       	adc	r15, r17
     8c2:	0f 5f       	subi	r16, 0xFF	; 255
     8c4:	1f 4f       	sbci	r17, 0xFF	; 255
		do xputc(s[--i]); while(i);
     8c6:	01 50       	subi	r16, 0x01	; 1
     8c8:	10 40       	sbci	r17, 0x00	; 0
     8ca:	d7 01       	movw	r26, r14
     8cc:	8c 91       	ld	r24, X
     8ce:	0e 94 df 02 	call	0x5be	; 0x5be <xputc>
     8d2:	08 94       	sec
     8d4:	e1 08       	sbc	r14, r1
     8d6:	f1 08       	sbc	r15, r1
     8d8:	01 15       	cp	r16, r1
     8da:	11 05       	cpc	r17, r1
     8dc:	a1 f7       	brne	.-24     	; 0x8c6 <xvprintf+0x2c6>
     8de:	06 c0       	rjmp	.+12     	; 0x8ec <xvprintf+0x2ec>
		while (j++ < w) xputc(' ');
     8e0:	80 e2       	ldi	r24, 0x20	; 32
     8e2:	0e 94 df 02 	call	0x5be	; 0x5be <xputc>
     8e6:	08 94       	sec
     8e8:	c1 1c       	adc	r12, r1
     8ea:	d1 1c       	adc	r13, r1
     8ec:	c6 14       	cp	r12, r6
     8ee:	d7 04       	cpc	r13, r7
     8f0:	b8 f3       	brcs	.-18     	; 0x8e0 <xvprintf+0x2e0>
     8f2:	71 01       	movw	r14, r2
     8f4:	92 ce       	rjmp	.-732    	; 0x61a <xvprintf+0x1a>
	}
}
     8f6:	64 96       	adiw	r28, 0x14	; 20
     8f8:	e2 e1       	ldi	r30, 0x12	; 18
     8fa:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__epilogue_restores__>

000008fe <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
     8fe:	a0 e0       	ldi	r26, 0x00	; 0
     900:	b0 e0       	ldi	r27, 0x00	; 0
     902:	e5 e8       	ldi	r30, 0x85	; 133
     904:	f4 e0       	ldi	r31, 0x04	; 4
     906:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__prologue_saves__+0x20>
     90a:	fe 01       	movw	r30, r28
     90c:	35 96       	adiw	r30, 0x05	; 5
	va_list arp;


	va_start(arp, fmt);
	xvprintf(fmt, arp);
     90e:	81 91       	ld	r24, Z+
     910:	91 91       	ld	r25, Z+
     912:	bf 01       	movw	r22, r30
     914:	0e 94 00 03 	call	0x600	; 0x600 <xvprintf>
	va_end(arp);
}
     918:	20 96       	adiw	r28, 0x00	; 0
     91a:	e2 e0       	ldi	r30, 0x02	; 2
     91c:	0c 94 2d 08 	jmp	0x105a	; 0x105a <__epilogue_restores__+0x20>

00000920 <nrf24_setupPins>:
#define set_bit(reg,bit) reg |= (1<<bit)
#define clr_bit(reg,bit) reg &= ~(1<<bit)
#define check_bit(reg,bit) (reg&(1<<bit))

void nrf24_setupPins() {
    set_bit(DDRB,7); // CE output
     920:	27 9a       	sbi	0x04, 7	; 4
    set_bit(DDRB,0); // CSN output
     922:	20 9a       	sbi	0x04, 0	; 4
    set_bit(DDRB,1); // SCK output
     924:	21 9a       	sbi	0x04, 1	; 4
    set_bit(DDRB,2); // MOSI output
     926:	22 9a       	sbi	0x04, 2	; 4
    clr_bit(DDRB,3); // MISO input
     928:	23 98       	cbi	0x04, 3	; 4
}
     92a:	08 95       	ret

0000092c <nrf24_ce_digitalWrite>:

void nrf24_ce_digitalWrite(uint8_t state) {
    if(state) {
     92c:	88 23       	and	r24, r24
     92e:	11 f0       	breq	.+4      	; 0x934 <nrf24_ce_digitalWrite+0x8>
        set_bit(PORTB,7);
     930:	2f 9a       	sbi	0x05, 7	; 5
     932:	08 95       	ret
    } else {
        clr_bit(PORTB,7);
     934:	2f 98       	cbi	0x05, 7	; 5
     936:	08 95       	ret

00000938 <nrf24_csn_digitalWrite>:
    }
}

void nrf24_csn_digitalWrite(uint8_t state) {
    if(state) {
     938:	88 23       	and	r24, r24
     93a:	11 f0       	breq	.+4      	; 0x940 <nrf24_csn_digitalWrite+0x8>
        set_bit(PORTB,0);
     93c:	28 9a       	sbi	0x05, 0	; 5
     93e:	08 95       	ret
    } else {
        clr_bit(PORTB,0);
     940:	28 98       	cbi	0x05, 0	; 5
     942:	08 95       	ret

00000944 <nrf24_sck_digitalWrite>:
    }
}

void nrf24_sck_digitalWrite(uint8_t state) {
    if(state) {
     944:	88 23       	and	r24, r24
     946:	11 f0       	breq	.+4      	; 0x94c <nrf24_sck_digitalWrite+0x8>
        set_bit(PORTB,1);
     948:	29 9a       	sbi	0x05, 1	; 5
     94a:	08 95       	ret
    } else {
        clr_bit(PORTB,1);
     94c:	29 98       	cbi	0x05, 1	; 5
     94e:	08 95       	ret

00000950 <nrf24_mosi_digitalWrite>:
    }
}

void nrf24_mosi_digitalWrite(uint8_t state) {
    if(state) {
     950:	88 23       	and	r24, r24
     952:	11 f0       	breq	.+4      	; 0x958 <nrf24_mosi_digitalWrite+0x8>
        set_bit(PORTB,2);
     954:	2a 9a       	sbi	0x05, 2	; 5
     956:	08 95       	ret
    } else {
        clr_bit(PORTB,2);
     958:	2a 98       	cbi	0x05, 2	; 5
     95a:	08 95       	ret

0000095c <nrf24_miso_digitalRead>:
    }
}

uint8_t nrf24_miso_digitalRead() {
    return check_bit(PINB,3);
     95c:	83 b1       	in	r24, 0x03	; 3
}
     95e:	88 70       	andi	r24, 0x08	; 8
     960:	08 95       	ret

00000962 <uart_init>:
#define uart_set_pin()        PORTD |= (1<<3)
#define uart_clr_pin()        PORTD &= ~(1<<3)
#define uart_bit_dly()        _delay_us(100)

void uart_init() {
    uart_pin_output();
     962:	53 9a       	sbi	0x0a, 3	; 10
}
     964:	08 95       	ret

00000966 <uart_put_char>:
void uart_put_char(uint8_t tx) {
    uint8_t i;

    uart_clr_pin();
     966:	5b 98       	cbi	0x0b, 3	; 11
     968:	e0 e9       	ldi	r30, 0x90	; 144
     96a:	f1 e0       	ldi	r31, 0x01	; 1
     96c:	31 97       	sbiw	r30, 0x01	; 1
     96e:	f1 f7       	brne	.-4      	; 0x96c <uart_put_char+0x6>
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	30 e0       	ldi	r19, 0x00	; 0
    uart_bit_dly();

    for (i=0;i<8;i++) {
        if (tx & (1<<i)) {
     974:	48 2f       	mov	r20, r24
     976:	50 e0       	ldi	r21, 0x00	; 0
     978:	60 e9       	ldi	r22, 0x90	; 144
     97a:	71 e0       	ldi	r23, 0x01	; 1
     97c:	ca 01       	movw	r24, r20
     97e:	02 2e       	mov	r0, r18
     980:	02 c0       	rjmp	.+4      	; 0x986 <uart_put_char+0x20>
     982:	95 95       	asr	r25
     984:	87 95       	ror	r24
     986:	0a 94       	dec	r0
     988:	e2 f7       	brpl	.-8      	; 0x982 <uart_put_char+0x1c>
     98a:	80 ff       	sbrs	r24, 0
     98c:	02 c0       	rjmp	.+4      	; 0x992 <uart_put_char+0x2c>
            uart_set_pin();
     98e:	5b 9a       	sbi	0x0b, 3	; 11
     990:	01 c0       	rjmp	.+2      	; 0x994 <uart_put_char+0x2e>
        } else {
            uart_clr_pin();
     992:	5b 98       	cbi	0x0b, 3	; 11
     994:	cb 01       	movw	r24, r22
     996:	01 97       	sbiw	r24, 0x01	; 1
     998:	f1 f7       	brne	.-4      	; 0x996 <uart_put_char+0x30>
     99a:	2f 5f       	subi	r18, 0xFF	; 255
     99c:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;

    uart_clr_pin();
    uart_bit_dly();

    for (i=0;i<8;i++) {
     99e:	28 30       	cpi	r18, 0x08	; 8
     9a0:	31 05       	cpc	r19, r1
     9a2:	61 f7       	brne	.-40     	; 0x97c <uart_put_char+0x16>
        }

        uart_bit_dly();
    }

    uart_set_pin();
     9a4:	5b 9a       	sbi	0x0b, 3	; 11
     9a6:	80 e9       	ldi	r24, 0x90	; 144
     9a8:	91 e0       	ldi	r25, 0x01	; 1
     9aa:	01 97       	sbiw	r24, 0x01	; 1
     9ac:	f1 f7       	brne	.-4      	; 0x9aa <uart_put_char+0x44>
    uart_bit_dly();
     9ae:	08 95       	ret

000009b0 <usb_init>:


// initialize USB
void usb_init(void)
{
	HW_CONFIG();
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	80 93 d7 00 	sts	0x00D7, r24
	USB_FREEZE();	// enable USB
     9b6:	80 ea       	ldi	r24, 0xA0	; 160
     9b8:	80 93 d8 00 	sts	0x00D8, r24
	PLL_CONFIG();				// config PLL
     9bc:	82 e1       	ldi	r24, 0x12	; 18
     9be:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
     9c0:	09 b4       	in	r0, 0x29	; 41
     9c2:	00 fe       	sbrs	r0, 0
     9c4:	fd cf       	rjmp	.-6      	; 0x9c0 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
     9c6:	80 e9       	ldi	r24, 0x90	; 144
     9c8:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
     9cc:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
     9d0:	10 92 b8 01 	sts	0x01B8, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
     9d4:	8c e0       	ldi	r24, 0x0C	; 12
     9d6:	80 93 e2 00 	sts	0x00E2, r24
	sei();
     9da:	78 94       	sei
}
     9dc:	08 95       	ret

000009de <usb_configured>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
	return usb_configuration;
     9de:	80 91 b8 01 	lds	r24, 0x01B8
}
     9e2:	08 95       	ret

000009e4 <usb_keyboard_send>:
// send the contents of keyboard_keys and keyboard_modifier_keys
int8_t usb_keyboard_send(void)
{
	uint8_t i, intr_state, timeout;

	if (!usb_configuration) return -1;
     9e4:	80 91 b8 01 	lds	r24, 0x01B8
     9e8:	88 23       	and	r24, r24
     9ea:	09 f4       	brne	.+2      	; 0x9ee <usb_keyboard_send+0xa>
     9ec:	41 c0       	rjmp	.+130    	; 0xa70 <usb_keyboard_send+0x8c>
	intr_state = SREG;
     9ee:	2f b7       	in	r18, 0x3f	; 63
	cli();
     9f0:	f8 94       	cli
	UENUM = KEYBOARD_ENDPOINT;
     9f2:	83 e0       	ldi	r24, 0x03	; 3
     9f4:	80 93 e9 00 	sts	0x00E9, r24
	timeout = UDFNUML + 50;
     9f8:	90 91 e4 00 	lds	r25, 0x00E4
     9fc:	9e 5c       	subi	r25, 0xCE	; 206
		// have we waited too long?
		if (UDFNUML == timeout) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = KEYBOARD_ENDPOINT;
     9fe:	33 e0       	ldi	r19, 0x03	; 3
	cli();
	UENUM = KEYBOARD_ENDPOINT;
	timeout = UDFNUML + 50;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     a00:	80 91 e8 00 	lds	r24, 0x00E8
     a04:	85 fd       	sbrc	r24, 5
     a06:	0e c0       	rjmp	.+28     	; 0xa24 <usb_keyboard_send+0x40>
		SREG = intr_state;
     a08:	2f bf       	out	0x3f, r18	; 63
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     a0a:	80 91 b8 01 	lds	r24, 0x01B8
     a0e:	88 23       	and	r24, r24
     a10:	79 f1       	breq	.+94     	; 0xa70 <usb_keyboard_send+0x8c>
		// have we waited too long?
		if (UDFNUML == timeout) return -1;
     a12:	80 91 e4 00 	lds	r24, 0x00E4
     a16:	89 17       	cp	r24, r25
     a18:	59 f1       	breq	.+86     	; 0xa70 <usb_keyboard_send+0x8c>
		// get ready to try checking again
		intr_state = SREG;
     a1a:	2f b7       	in	r18, 0x3f	; 63
		cli();
     a1c:	f8 94       	cli
		UENUM = KEYBOARD_ENDPOINT;
     a1e:	30 93 e9 00 	sts	0x00E9, r19
     a22:	ee cf       	rjmp	.-36     	; 0xa00 <usb_keyboard_send+0x1c>
	}
	UEDATX = keyboard_modifier_keys;
     a24:	80 91 b0 01 	lds	r24, 0x01B0
     a28:	80 93 f1 00 	sts	0x00F1, r24
	UEDATX = 0;
     a2c:	10 92 f1 00 	sts	0x00F1, r1
	for (i=0; i<6; i++) {
		UEDATX = keyboard_keys[i];
     a30:	80 91 b1 01 	lds	r24, 0x01B1
     a34:	80 93 f1 00 	sts	0x00F1, r24
     a38:	80 91 b2 01 	lds	r24, 0x01B2
     a3c:	80 93 f1 00 	sts	0x00F1, r24
     a40:	80 91 b3 01 	lds	r24, 0x01B3
     a44:	80 93 f1 00 	sts	0x00F1, r24
     a48:	80 91 b4 01 	lds	r24, 0x01B4
     a4c:	80 93 f1 00 	sts	0x00F1, r24
     a50:	80 91 b5 01 	lds	r24, 0x01B5
     a54:	80 93 f1 00 	sts	0x00F1, r24
     a58:	80 91 b6 01 	lds	r24, 0x01B6
     a5c:	80 93 f1 00 	sts	0x00F1, r24
	}
	UEINTX = 0x3A;
     a60:	8a e3       	ldi	r24, 0x3A	; 58
     a62:	80 93 e8 00 	sts	0x00E8, r24
	keyboard_idle_count = 0;
     a66:	10 92 b9 01 	sts	0x01B9, r1
	SREG = intr_state;
     a6a:	2f bf       	out	0x3f, r18	; 63
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	08 95       	ret
	return 0;
     a70:	8f ef       	ldi	r24, 0xFF	; 255
}
     a72:	08 95       	ret

00000a74 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
     a74:	1f 92       	push	r1
     a76:	0f 92       	push	r0
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	0f 92       	push	r0
     a7c:	11 24       	eor	r1, r1
     a7e:	2f 93       	push	r18
     a80:	8f 93       	push	r24
     a82:	9f 93       	push	r25
	uint8_t intbits, t, i;
	static uint8_t div4=0;

        intbits = UDINT;
     a84:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
     a88:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
     a8c:	98 2f       	mov	r25, r24
     a8e:	83 ff       	sbrs	r24, 3
     a90:	0f c0       	rjmp	.+30     	; 0xab0 <__vector_10+0x3c>
		UENUM = 0;
     a92:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
     a9c:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
     aa0:	82 e2       	ldi	r24, 0x22	; 34
     aa2:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
     aa6:	88 e0       	ldi	r24, 0x08	; 8
     aa8:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
     aac:	10 92 b8 01 	sts	0x01B8, r1
        }
	if ((intbits & (1<<SOFI)) && usb_configuration) {
     ab0:	92 ff       	sbrs	r25, 2
     ab2:	44 c0       	rjmp	.+136    	; 0xb3c <__stack+0x3d>
     ab4:	80 91 b8 01 	lds	r24, 0x01B8
     ab8:	88 23       	and	r24, r24
     aba:	09 f4       	brne	.+2      	; 0xabe <__vector_10+0x4a>
     abc:	3f c0       	rjmp	.+126    	; 0xb3c <__stack+0x3d>
		if (keyboard_idle_config && (++div4 & 3) == 0) {
     abe:	20 91 5b 01 	lds	r18, 0x015B
     ac2:	22 23       	and	r18, r18
     ac4:	d9 f1       	breq	.+118    	; 0xb3c <__stack+0x3d>
     ac6:	80 91 ba 01 	lds	r24, 0x01BA
     aca:	8f 5f       	subi	r24, 0xFF	; 255
     acc:	80 93 ba 01 	sts	0x01BA, r24
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	83 70       	andi	r24, 0x03	; 3
     ad4:	90 70       	andi	r25, 0x00	; 0
     ad6:	89 2b       	or	r24, r25
     ad8:	89 f5       	brne	.+98     	; 0xb3c <__stack+0x3d>
			UENUM = KEYBOARD_ENDPOINT;
     ada:	83 e0       	ldi	r24, 0x03	; 3
     adc:	80 93 e9 00 	sts	0x00E9, r24
			if (UEINTX & (1<<RWAL)) {
     ae0:	80 91 e8 00 	lds	r24, 0x00E8
     ae4:	85 ff       	sbrs	r24, 5
     ae6:	2a c0       	rjmp	.+84     	; 0xb3c <__stack+0x3d>
				keyboard_idle_count++;
     ae8:	80 91 b9 01 	lds	r24, 0x01B9
     aec:	8f 5f       	subi	r24, 0xFF	; 255
     aee:	80 93 b9 01 	sts	0x01B9, r24
				if (keyboard_idle_count == keyboard_idle_config) {
     af2:	82 17       	cp	r24, r18
     af4:	19 f5       	brne	.+70     	; 0xb3c <__stack+0x3d>
					keyboard_idle_count = 0;
     af6:	10 92 b9 01 	sts	0x01B9, r1
					UEDATX = keyboard_modifier_keys;
     afa:	80 91 b0 01 	lds	r24, 0x01B0
     afe:	80 93 f1 00 	sts	0x00F1, r24
					UEDATX = 0;
     b02:	10 92 f1 00 	sts	0x00F1, r1
					for (i=0; i<6; i++) {
						UEDATX = keyboard_keys[i];
     b06:	80 91 b1 01 	lds	r24, 0x01B1
     b0a:	80 93 f1 00 	sts	0x00F1, r24
     b0e:	80 91 b2 01 	lds	r24, 0x01B2
     b12:	80 93 f1 00 	sts	0x00F1, r24
     b16:	80 91 b3 01 	lds	r24, 0x01B3
     b1a:	80 93 f1 00 	sts	0x00F1, r24
     b1e:	80 91 b4 01 	lds	r24, 0x01B4
     b22:	80 93 f1 00 	sts	0x00F1, r24
     b26:	80 91 b5 01 	lds	r24, 0x01B5
     b2a:	80 93 f1 00 	sts	0x00F1, r24
     b2e:	80 91 b6 01 	lds	r24, 0x01B6
     b32:	80 93 f1 00 	sts	0x00F1, r24
					}
					UEINTX = 0x3A;
     b36:	8a e3       	ldi	r24, 0x3A	; 58
     b38:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
     b3c:	9f 91       	pop	r25
     b3e:	8f 91       	pop	r24
     b40:	2f 91       	pop	r18
     b42:	0f 90       	pop	r0
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	0f 90       	pop	r0
     b48:	1f 90       	pop	r1
     b4a:	18 95       	reti

00000b4c <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
     b4c:	1f 92       	push	r1
     b4e:	0f 92       	push	r0
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	0f 92       	push	r0
     b54:	11 24       	eor	r1, r1
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	2f 93       	push	r18
     b5c:	3f 93       	push	r19
     b5e:	4f 93       	push	r20
     b60:	5f 93       	push	r21
     b62:	6f 93       	push	r22
     b64:	7f 93       	push	r23
     b66:	8f 93       	push	r24
     b68:	9f 93       	push	r25
     b6a:	af 93       	push	r26
     b6c:	bf 93       	push	r27
     b6e:	ef 93       	push	r30
     b70:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
     b72:	10 92 e9 00 	sts	0x00E9, r1
	intbits = UEINTX;
     b76:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
     b7a:	83 ff       	sbrs	r24, 3
     b7c:	5b c1       	rjmp	.+694    	; 0xe34 <__vector_11+0x2e8>
                bmRequestType = UEDATX;
     b7e:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
     b82:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
     b86:	80 91 f1 00 	lds	r24, 0x00F1
     b8a:	68 2f       	mov	r22, r24
     b8c:	70 e0       	ldi	r23, 0x00	; 0
                wValue |= (UEDATX << 8);
     b8e:	20 91 f1 00 	lds	r18, 0x00F1
     b92:	92 2f       	mov	r25, r18
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	68 2b       	or	r22, r24
     b98:	79 2b       	or	r23, r25
                wIndex = UEDATX;
     b9a:	80 91 f1 00 	lds	r24, 0x00F1
     b9e:	a8 2f       	mov	r26, r24
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
                wIndex |= (UEDATX << 8);
     ba2:	20 91 f1 00 	lds	r18, 0x00F1
     ba6:	92 2f       	mov	r25, r18
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	a8 2b       	or	r26, r24
     bac:	b9 2b       	or	r27, r25
                wLength = UEDATX;
     bae:	10 91 f1 00 	lds	r17, 0x00F1
                wLength |= (UEDATX << 8);
     bb2:	00 91 f1 00 	lds	r16, 0x00F1
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
     bb6:	82 ef       	ldi	r24, 0xF2	; 242
     bb8:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
     bbc:	36 30       	cpi	r19, 0x06	; 6
     bbe:	09 f0       	breq	.+2      	; 0xbc2 <__vector_11+0x76>
     bc0:	5a c0       	rjmp	.+180    	; 0xc76 <__vector_11+0x12a>
     bc2:	23 eb       	ldi	r18, 0xB3	; 179
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	a9 01       	movw	r20, r18
     bc8:	45 50       	subi	r20, 0x05	; 5
     bca:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
     bcc:	f9 01       	movw	r30, r18
     bce:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
     bd0:	85 91       	lpm	r24, Z+
     bd2:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
     bd4:	86 17       	cp	r24, r22
     bd6:	97 07       	cpc	r25, r23
     bd8:	01 f5       	brne	.+64     	; 0xc1a <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
     bda:	fa 01       	movw	r30, r20
     bdc:	85 91       	lpm	r24, Z+
     bde:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
     be0:	8a 17       	cp	r24, r26
     be2:	9b 07       	cpc	r25, r27
     be4:	d1 f4       	brne	.+52     	; 0xc1a <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
     be6:	9a 01       	movw	r18, r20
     be8:	2e 5f       	subi	r18, 0xFE	; 254
     bea:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
     bec:	f9 01       	movw	r30, r18
     bee:	65 91       	lpm	r22, Z+
     bf0:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
     bf2:	2e 5f       	subi	r18, 0xFE	; 254
     bf4:	3f 4f       	sbci	r19, 0xFF	; 255
     bf6:	f9 01       	movw	r30, r18
     bf8:	44 91       	lpm	r20, Z+
                bRequest = UEDATX;
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
     bfa:	21 2f       	mov	r18, r17
     bfc:	30 e0       	ldi	r19, 0x00	; 0
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
     bfe:	90 2f       	mov	r25, r16
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	28 2b       	or	r18, r24
     c04:	39 2b       	or	r19, r25
     c06:	2f 3f       	cpi	r18, 0xFF	; 255
     c08:	31 05       	cpc	r19, r1
     c0a:	19 f0       	breq	.+6      	; 0xc12 <__vector_11+0xc6>
     c0c:	10 f0       	brcs	.+4      	; 0xc12 <__vector_11+0xc6>
     c0e:	2f ef       	ldi	r18, 0xFF	; 255
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	24 17       	cp	r18, r20
     c14:	58 f4       	brcc	.+22     	; 0xc2c <__vector_11+0xe0>
     c16:	42 2f       	mov	r20, r18
     c18:	09 c0       	rjmp	.+18     	; 0xc2c <__vector_11+0xe0>
     c1a:	29 5f       	subi	r18, 0xF9	; 249
     c1c:	3f 4f       	sbci	r19, 0xFF	; 255
     c1e:	49 5f       	subi	r20, 0xF9	; 249
     c20:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	24 3e       	cpi	r18, 0xE4	; 228
     c26:	3f 07       	cpc	r19, r31
     c28:	89 f6       	brne	.-94     	; 0xbcc <__vector_11+0x80>
     c2a:	04 c1       	rjmp	.+520    	; 0xe34 <__vector_11+0x2e8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     c2c:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
     c2e:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
     c32:	28 2f       	mov	r18, r24
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	c9 01       	movw	r24, r18
     c38:	85 70       	andi	r24, 0x05	; 5
     c3a:	90 70       	andi	r25, 0x00	; 0
     c3c:	89 2b       	or	r24, r25
     c3e:	b9 f3       	breq	.-18     	; 0xc2e <__vector_11+0xe2>
				if (i & (1<<RXOUTI)) return;	// abort
     c40:	22 fd       	sbrc	r18, 2
     c42:	fb c0       	rjmp	.+502    	; 0xe3a <__vector_11+0x2ee>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
     c44:	34 2f       	mov	r19, r20
     c46:	41 32       	cpi	r20, 0x21	; 33
     c48:	08 f0       	brcs	.+2      	; 0xc4c <__vector_11+0x100>
     c4a:	30 e2       	ldi	r19, 0x20	; 32
     c4c:	23 2f       	mov	r18, r19
     c4e:	cb 01       	movw	r24, r22
     c50:	06 c0       	rjmp	.+12     	; 0xc5e <__vector_11+0x112>
				for (i = n; i; i--) {
     c52:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
     c54:	01 96       	adiw	r24, 0x01	; 1
     c56:	e4 91       	lpm	r30, Z+
     c58:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
     c5c:	21 50       	subi	r18, 0x01	; 1
     c5e:	22 23       	and	r18, r18
     c60:	c1 f7       	brne	.-16     	; 0xc52 <__vector_11+0x106>
     c62:	63 0f       	add	r22, r19
     c64:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
     c66:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     c68:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
     c6c:	44 23       	and	r20, r20
     c6e:	f9 f6       	brne	.-66     	; 0xc2e <__vector_11+0xe2>
     c70:	30 32       	cpi	r19, 0x20	; 32
     c72:	e9 f2       	breq	.-70     	; 0xc2e <__vector_11+0xe2>
     c74:	e2 c0       	rjmp	.+452    	; 0xe3a <__vector_11+0x2ee>
			return;
                }
		if (bRequest == SET_ADDRESS) {
     c76:	35 30       	cpi	r19, 0x05	; 5
     c78:	61 f4       	brne	.+24     	; 0xc92 <__vector_11+0x146>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     c7a:	8e ef       	ldi	r24, 0xFE	; 254
     c7c:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     c80:	80 91 e8 00 	lds	r24, 0x00E8
     c84:	80 ff       	sbrs	r24, 0
     c86:	fc cf       	rjmp	.-8      	; 0xc80 <__vector_11+0x134>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
     c88:	86 2f       	mov	r24, r22
     c8a:	80 68       	ori	r24, 0x80	; 128
     c8c:	80 93 e3 00 	sts	0x00E3, r24
     c90:	d4 c0       	rjmp	.+424    	; 0xe3a <__vector_11+0x2ee>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
     c92:	39 30       	cpi	r19, 0x09	; 9
     c94:	31 f5       	brne	.+76     	; 0xce2 <__vector_11+0x196>
     c96:	44 23       	and	r20, r20
     c98:	09 f0       	breq	.+2      	; 0xc9c <__vector_11+0x150>
     c9a:	71 c0       	rjmp	.+226    	; 0xd7e <__vector_11+0x232>
			usb_configuration = wValue;
     c9c:	60 93 b8 01 	sts	0x01B8, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     ca0:	8e ef       	ldi	r24, 0xFE	; 254
     ca2:	80 93 e8 00 	sts	0x00E8, r24
     ca6:	8d ed       	ldi	r24, 0xDD	; 221
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	21 e0       	ldi	r18, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
     cac:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
     cb0:	fc 01       	movw	r30, r24
     cb2:	01 96       	adiw	r24, 0x01	; 1
     cb4:	e4 91       	lpm	r30, Z+
				UECONX = en;
     cb6:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
     cba:	ee 23       	and	r30, r30
     cbc:	69 f0       	breq	.+26     	; 0xcd8 <__vector_11+0x18c>
					UECFG0X = pgm_read_byte(cfg++);
     cbe:	ac 01       	movw	r20, r24
     cc0:	4f 5f       	subi	r20, 0xFF	; 255
     cc2:	5f 4f       	sbci	r21, 0xFF	; 255
     cc4:	fc 01       	movw	r30, r24
     cc6:	84 91       	lpm	r24, Z+
     cc8:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
     ccc:	ca 01       	movw	r24, r20
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	fa 01       	movw	r30, r20
     cd2:	34 91       	lpm	r19, Z+
     cd4:	30 93 ed 00 	sts	0x00ED, r19
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     cd8:	2f 5f       	subi	r18, 0xFF	; 255
     cda:	25 30       	cpi	r18, 0x05	; 5
     cdc:	39 f7       	brne	.-50     	; 0xcac <__vector_11+0x160>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
     cde:	8e e1       	ldi	r24, 0x1E	; 30
     ce0:	49 c0       	rjmp	.+146    	; 0xd74 <__vector_11+0x228>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
     ce2:	38 30       	cpi	r19, 0x08	; 8
     ce4:	51 f4       	brne	.+20     	; 0xcfa <__vector_11+0x1ae>
     ce6:	40 38       	cpi	r20, 0x80	; 128
     ce8:	09 f0       	breq	.+2      	; 0xcec <__vector_11+0x1a0>
     cea:	49 c0       	rjmp	.+146    	; 0xd7e <__vector_11+0x232>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     cec:	80 91 e8 00 	lds	r24, 0x00E8
     cf0:	80 ff       	sbrs	r24, 0
     cf2:	fc cf       	rjmp	.-8      	; 0xcec <__vector_11+0x1a0>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
     cf4:	80 91 b8 01 	lds	r24, 0x01B8
     cf8:	7b c0       	rjmp	.+246    	; 0xdf0 <__vector_11+0x2a4>
			usb_send_in();
			return;
		}

		if (bRequest == GET_STATUS) {
     cfa:	33 23       	and	r19, r19
     cfc:	d1 f4       	brne	.+52     	; 0xd32 <__vector_11+0x1e6>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     cfe:	80 91 e8 00 	lds	r24, 0x00E8
     d02:	80 ff       	sbrs	r24, 0
     d04:	fc cf       	rjmp	.-8      	; 0xcfe <__vector_11+0x1b2>

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
     d06:	42 38       	cpi	r20, 0x82	; 130
     d08:	11 f0       	breq	.+4      	; 0xd0e <__vector_11+0x1c2>
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	0d c0       	rjmp	.+26     	; 0xd28 <__vector_11+0x1dc>
				UENUM = wIndex;
     d0e:	a0 93 e9 00 	sts	0x00E9, r26
				if (UECONX & (1<<STALLRQ)) i = 1;
     d12:	80 91 eb 00 	lds	r24, 0x00EB
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	25 e0       	ldi	r18, 0x05	; 5
     d1a:	96 95       	lsr	r25
     d1c:	87 95       	ror	r24
     d1e:	2a 95       	dec	r18
     d20:	e1 f7       	brne	.-8      	; 0xd1a <__vector_11+0x1ce>
     d22:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
     d24:	10 92 e9 00 	sts	0x00E9, r1
			}
			#endif
			UEDATX = i;
     d28:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
     d2c:	10 92 f1 00 	sts	0x00F1, r1
     d30:	7d c0       	rjmp	.+250    	; 0xe2c <__vector_11+0x2e0>
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
     d32:	31 30       	cpi	r19, 0x01	; 1
     d34:	11 f0       	breq	.+4      	; 0xd3a <__vector_11+0x1ee>
     d36:	33 30       	cpi	r19, 0x03	; 3
     d38:	11 f5       	brne	.+68     	; 0xd7e <__vector_11+0x232>
     d3a:	42 30       	cpi	r20, 0x02	; 2
     d3c:	01 f5       	brne	.+64     	; 0xd7e <__vector_11+0x232>
     d3e:	61 15       	cp	r22, r1
     d40:	71 05       	cpc	r23, r1
     d42:	e9 f4       	brne	.+58     	; 0xd7e <__vector_11+0x232>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
     d44:	2a 2f       	mov	r18, r26
     d46:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
     d48:	82 2f       	mov	r24, r18
     d4a:	81 50       	subi	r24, 0x01	; 1
     d4c:	84 30       	cpi	r24, 0x04	; 4
     d4e:	b8 f4       	brcc	.+46     	; 0xd7e <__vector_11+0x232>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     d50:	8e ef       	ldi	r24, 0xFE	; 254
     d52:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
     d56:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
     d5a:	33 30       	cpi	r19, 0x03	; 3
     d5c:	09 f4       	brne	.+2      	; 0xd60 <__vector_11+0x214>
     d5e:	6a c0       	rjmp	.+212    	; 0xe34 <__vector_11+0x2e8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
     d60:	89 e1       	ldi	r24, 0x19	; 25
     d62:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <__vector_11+0x224>
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	2a 95       	dec	r18
     d72:	e2 f7       	brpl	.-8      	; 0xd6c <__vector_11+0x220>
     d74:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
     d78:	10 92 ea 00 	sts	0x00EA, r1
     d7c:	5e c0       	rjmp	.+188    	; 0xe3a <__vector_11+0x2ee>
				}
				return;
			}
		}
		#endif
		if (wIndex == KEYBOARD_INTERFACE) {
     d7e:	ab 2b       	or	r26, r27
     d80:	09 f0       	breq	.+2      	; 0xd84 <__vector_11+0x238>
     d82:	58 c0       	rjmp	.+176    	; 0xe34 <__vector_11+0x2e8>
			if (bmRequestType == 0xA1) {
     d84:	41 3a       	cpi	r20, 0xA1	; 161
     d86:	b9 f5       	brne	.+110    	; 0xdf6 <__vector_11+0x2aa>
				if (bRequest == HID_GET_REPORT) {
     d88:	31 30       	cpi	r19, 0x01	; 1
     d8a:	09 f5       	brne	.+66     	; 0xdce <__vector_11+0x282>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     d8c:	80 91 e8 00 	lds	r24, 0x00E8
     d90:	80 ff       	sbrs	r24, 0
     d92:	fc cf       	rjmp	.-8      	; 0xd8c <__vector_11+0x240>
		#endif
		if (wIndex == KEYBOARD_INTERFACE) {
			if (bmRequestType == 0xA1) {
				if (bRequest == HID_GET_REPORT) {
					usb_wait_in_ready();
					UEDATX = keyboard_modifier_keys;
     d94:	80 91 b0 01 	lds	r24, 0x01B0
     d98:	80 93 f1 00 	sts	0x00F1, r24
					UEDATX = 0;
     d9c:	10 92 f1 00 	sts	0x00F1, r1
					for (i=0; i<6; i++) {
						UEDATX = keyboard_keys[i];
     da0:	80 91 b1 01 	lds	r24, 0x01B1
     da4:	80 93 f1 00 	sts	0x00F1, r24
     da8:	80 91 b2 01 	lds	r24, 0x01B2
     dac:	80 93 f1 00 	sts	0x00F1, r24
     db0:	80 91 b3 01 	lds	r24, 0x01B3
     db4:	80 93 f1 00 	sts	0x00F1, r24
     db8:	80 91 b4 01 	lds	r24, 0x01B4
     dbc:	80 93 f1 00 	sts	0x00F1, r24
     dc0:	80 91 b5 01 	lds	r24, 0x01B5
     dc4:	80 93 f1 00 	sts	0x00F1, r24
     dc8:	80 91 b6 01 	lds	r24, 0x01B6
     dcc:	11 c0       	rjmp	.+34     	; 0xdf0 <__vector_11+0x2a4>
					}
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_IDLE) {
     dce:	32 30       	cpi	r19, 0x02	; 2
     dd0:	39 f4       	brne	.+14     	; 0xde0 <__vector_11+0x294>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     dd2:	80 91 e8 00 	lds	r24, 0x00E8
     dd6:	80 ff       	sbrs	r24, 0
     dd8:	fc cf       	rjmp	.-8      	; 0xdd2 <__vector_11+0x286>
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_IDLE) {
					usb_wait_in_ready();
					UEDATX = keyboard_idle_config;
     dda:	80 91 5b 01 	lds	r24, 0x015B
     dde:	08 c0       	rjmp	.+16     	; 0xdf0 <__vector_11+0x2a4>
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_PROTOCOL) {
     de0:	33 30       	cpi	r19, 0x03	; 3
     de2:	41 f5       	brne	.+80     	; 0xe34 <__vector_11+0x2e8>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     de4:	80 91 e8 00 	lds	r24, 0x00E8
     de8:	80 ff       	sbrs	r24, 0
     dea:	fc cf       	rjmp	.-8      	; 0xde4 <__vector_11+0x298>
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_PROTOCOL) {
					usb_wait_in_ready();
					UEDATX = keyboard_protocol;
     dec:	80 91 5c 01 	lds	r24, 0x015C
     df0:	80 93 f1 00 	sts	0x00F1, r24
     df4:	1b c0       	rjmp	.+54     	; 0xe2c <__vector_11+0x2e0>
					usb_send_in();
					return;
				}
			}
			if (bmRequestType == 0x21) {
     df6:	41 32       	cpi	r20, 0x21	; 33
     df8:	e9 f4       	brne	.+58     	; 0xe34 <__vector_11+0x2e8>
				if (bRequest == HID_SET_REPORT) {
     dfa:	39 30       	cpi	r19, 0x09	; 9
     dfc:	61 f4       	brne	.+24     	; 0xe16 <__vector_11+0x2ca>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
     dfe:	80 91 e8 00 	lds	r24, 0x00E8
     e02:	82 ff       	sbrs	r24, 2
     e04:	fc cf       	rjmp	.-8      	; 0xdfe <__vector_11+0x2b2>
				}
			}
			if (bmRequestType == 0x21) {
				if (bRequest == HID_SET_REPORT) {
					usb_wait_receive_out();
					keyboard_leds = UEDATX;
     e06:	80 91 f1 00 	lds	r24, 0x00F1
     e0a:	80 93 b7 01 	sts	0x01B7, r24
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
     e0e:	8b ef       	ldi	r24, 0xFB	; 251
     e10:	80 93 e8 00 	sts	0x00E8, r24
     e14:	0b c0       	rjmp	.+22     	; 0xe2c <__vector_11+0x2e0>
					keyboard_leds = UEDATX;
					usb_ack_out();
					usb_send_in();
					return;
				}
				if (bRequest == HID_SET_IDLE) {
     e16:	3a 30       	cpi	r19, 0x0A	; 10
     e18:	29 f4       	brne	.+10     	; 0xe24 <__vector_11+0x2d8>
					keyboard_idle_config = (wValue >> 8);
     e1a:	70 93 5b 01 	sts	0x015B, r23
					keyboard_idle_count = 0;
     e1e:	10 92 b9 01 	sts	0x01B9, r1
     e22:	04 c0       	rjmp	.+8      	; 0xe2c <__vector_11+0x2e0>
					usb_send_in();
					return;
				}
				if (bRequest == HID_SET_PROTOCOL) {
     e24:	3b 30       	cpi	r19, 0x0B	; 11
     e26:	31 f4       	brne	.+12     	; 0xe34 <__vector_11+0x2e8>
					keyboard_protocol = wValue;
     e28:	60 93 5c 01 	sts	0x015C, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     e2c:	8e ef       	ldi	r24, 0xFE	; 254
     e2e:	80 93 e8 00 	sts	0x00E8, r24
     e32:	03 c0       	rjmp	.+6      	; 0xe3a <__vector_11+0x2ee>
					return;
				}
			}
		}
	}
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
     e34:	81 e2       	ldi	r24, 0x21	; 33
     e36:	80 93 eb 00 	sts	0x00EB, r24
}
     e3a:	ff 91       	pop	r31
     e3c:	ef 91       	pop	r30
     e3e:	bf 91       	pop	r27
     e40:	af 91       	pop	r26
     e42:	9f 91       	pop	r25
     e44:	8f 91       	pop	r24
     e46:	7f 91       	pop	r23
     e48:	6f 91       	pop	r22
     e4a:	5f 91       	pop	r21
     e4c:	4f 91       	pop	r20
     e4e:	3f 91       	pop	r19
     e50:	2f 91       	pop	r18
     e52:	1f 91       	pop	r17
     e54:	0f 91       	pop	r16
     e56:	0f 90       	pop	r0
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	0f 90       	pop	r0
     e5c:	1f 90       	pop	r1
     e5e:	18 95       	reti

00000e60 <handle_row>:


/******************************************************************************/
// Turn the column state for the given hand and row into a series of calls to
// handle_key() to process the keys that have changed state.
void handle_row(uint8_t hand, uint8_t row, uint8_t cols) {
     e60:	6f 92       	push	r6
     e62:	7f 92       	push	r7
     e64:	8f 92       	push	r8
     e66:	9f 92       	push	r9
     e68:	af 92       	push	r10
     e6a:	bf 92       	push	r11
     e6c:	df 92       	push	r13
     e6e:	ef 92       	push	r14
     e70:	ff 92       	push	r15
     e72:	0f 93       	push	r16
     e74:	1f 93       	push	r17
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	d4 2e       	mov	r13, r20

    // Row offset into the keystate array
    uint8_t offs = (hand == 0 ? 0 : 5);
     e7c:	88 23       	and	r24, r24
     e7e:	11 f0       	breq	.+4      	; 0xe84 <handle_row+0x24>
     e80:	25 e0       	ldi	r18, 0x05	; 5
     e82:	01 c0       	rjmp	.+2      	; 0xe86 <handle_row+0x26>
     e84:	20 e0       	ldi	r18, 0x00	; 0

    uint8_t change = keystate[row+offs] ^ cols;
     e86:	06 2f       	mov	r16, r22
     e88:	10 e0       	ldi	r17, 0x00	; 0
     e8a:	02 0f       	add	r16, r18
     e8c:	11 1d       	adc	r17, r1
     e8e:	f8 01       	movw	r30, r16
     e90:	ef 53       	subi	r30, 0x3F	; 63
     e92:	fe 4f       	sbci	r31, 0xFE	; 254
     e94:	80 81       	ld	r24, Z
     e96:	8d 25       	eor	r24, r13
     e98:	26 0f       	add	r18, r22
     e9a:	c2 2f       	mov	r28, r18
     e9c:	d0 e0       	ldi	r29, 0x00	; 0
     e9e:	23 e0       	ldi	r18, 0x03	; 3
     ea0:	cc 0f       	add	r28, r28
     ea2:	dd 1f       	adc	r29, r29
     ea4:	2a 95       	dec	r18
     ea6:	e1 f7       	brne	.-8      	; 0xea0 <handle_row+0x40>
     ea8:	c3 5a       	subi	r28, 0xA3	; 163
     eaa:	de 4f       	sbci	r29, 0xFE	; 254
     eac:	ee 24       	eor	r14, r14
     eae:	ff 24       	eor	r15, r15
    uint8_t i;

    // Check for changed keys on the given row
    for (i=0; i<8; i++) {
        if (change & (1<<i)) {
     eb0:	a8 2e       	mov	r10, r24
     eb2:	bb 24       	eor	r11, r11
            handle_key(row+offs, i, cols & (1<<i));
     eb4:	91 e0       	ldi	r25, 0x01	; 1
     eb6:	69 2e       	mov	r6, r25
     eb8:	71 2c       	mov	r7, r1
    uint8_t i;

    for (i=0; i<6; i++) {
        if (keyboard_keys[i] == from) {
            keyboard_keys[i] = to;
            xprintf("%02d %02d %02d %02d\r\n", keyboard_keys[0], keyboard_keys[1], keyboard_keys[2], keyboard_keys[3]);
     eba:	8b e3       	ldi	r24, 0x3B	; 59
     ebc:	88 2e       	mov	r8, r24
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	98 2e       	mov	r9, r24
    uint8_t change = keystate[row+offs] ^ cols;
    uint8_t i;

    // Check for changed keys on the given row
    for (i=0; i<8; i++) {
        if (change & (1<<i)) {
     ec2:	c5 01       	movw	r24, r10
     ec4:	0e 2c       	mov	r0, r14
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <handle_row+0x6c>
     ec8:	95 95       	asr	r25
     eca:	87 95       	ror	r24
     ecc:	0a 94       	dec	r0
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <handle_row+0x68>
     ed0:	80 ff       	sbrs	r24, 0
     ed2:	5a c0       	rjmp	.+180    	; 0xf88 <handle_row+0x128>
            handle_key(row+offs, i, cols & (1<<i));
     ed4:	c3 01       	movw	r24, r6
     ed6:	0e 2c       	mov	r0, r14
     ed8:	02 c0       	rjmp	.+4      	; 0xede <handle_row+0x7e>
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	0a 94       	dec	r0
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <handle_row+0x7a>
     ee2:	2d 2d       	mov	r18, r13
     ee4:	28 23       	and	r18, r24

/******************************************************************************/
// Convert keypresses into scancodes.
static void handle_key(uint8_t row, uint8_t col, uint8_t state) {

    set_usb_key(keymap[row][col], state);
     ee6:	98 81       	ld	r25, Y
// Add the given scancode to the USB report if state is true,
// otherwise remove it.
static void set_usb_key(uint8_t scancode, uint8_t state) {

    // Handle modifier keys
    if (scancode & 0x80) {
     ee8:	97 ff       	sbrs	r25, 7
     eea:	0c c0       	rjmp	.+24     	; 0xf04 <handle_row+0xa4>
     eec:	9f 77       	andi	r25, 0x7F	; 127
     eee:	80 91 b0 01 	lds	r24, 0x01B0
        if (state) {
     ef2:	22 23       	and	r18, r18
     ef4:	11 f0       	breq	.+4      	; 0xefa <handle_row+0x9a>
            keyboard_modifier_keys |= (scancode & 0x7F);
     ef6:	89 2b       	or	r24, r25
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <handle_row+0x9e>
        } else {
            keyboard_modifier_keys &= ~(scancode & 0x7F);
     efa:	90 95       	com	r25
     efc:	89 23       	and	r24, r25
     efe:	80 93 b0 01 	sts	0x01B0, r24
     f02:	40 c0       	rjmp	.+128    	; 0xf84 <handle_row+0x124>
        return;
    }

    // If we are adding a new scancode we are looking for a blank slot to put it in.
    // If we are removing a scancode we are looking for that code to set to zero.
    uint8_t from = (state ? 0 : scancode);
     f04:	22 23       	and	r18, r18
     f06:	19 f4       	brne	.+6      	; 0xf0e <handle_row+0xae>
     f08:	49 2f       	mov	r20, r25
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	01 c0       	rjmp	.+2      	; 0xf10 <handle_row+0xb0>
     f0e:	40 e0       	ldi	r20, 0x00	; 0
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t to   = (state ? scancode : 0);
    uint8_t i;

    for (i=0; i<6; i++) {
        if (keyboard_keys[i] == from) {
     f14:	f9 01       	movw	r30, r18
     f16:	ef 54       	subi	r30, 0x4F	; 79
     f18:	fe 4f       	sbci	r31, 0xFE	; 254
     f1a:	80 81       	ld	r24, Z
     f1c:	84 17       	cp	r24, r20
     f1e:	69 f5       	brne	.+90     	; 0xf7a <handle_row+0x11a>
            keyboard_keys[i] = to;
     f20:	90 83       	st	Z, r25
            xprintf("%02d %02d %02d %02d\r\n", keyboard_keys[0], keyboard_keys[1], keyboard_keys[2], keyboard_keys[3]);
     f22:	8d b7       	in	r24, 0x3d	; 61
     f24:	9e b7       	in	r25, 0x3e	; 62
     f26:	0a 97       	sbiw	r24, 0x0a	; 10
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	f8 94       	cli
     f2c:	9e bf       	out	0x3e, r25	; 62
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	8d bf       	out	0x3d, r24	; 61
     f32:	ed b7       	in	r30, 0x3d	; 61
     f34:	fe b7       	in	r31, 0x3e	; 62
     f36:	31 96       	adiw	r30, 0x01	; 1
     f38:	ad b7       	in	r26, 0x3d	; 61
     f3a:	be b7       	in	r27, 0x3e	; 62
     f3c:	12 96       	adiw	r26, 0x02	; 2
     f3e:	9c 92       	st	X, r9
     f40:	8e 92       	st	-X, r8
     f42:	11 97       	sbiw	r26, 0x01	; 1
     f44:	80 91 b1 01 	lds	r24, 0x01B1
     f48:	82 83       	std	Z+2, r24	; 0x02
     f4a:	13 82       	std	Z+3, r1	; 0x03
     f4c:	80 91 b2 01 	lds	r24, 0x01B2
     f50:	84 83       	std	Z+4, r24	; 0x04
     f52:	15 82       	std	Z+5, r1	; 0x05
     f54:	80 91 b3 01 	lds	r24, 0x01B3
     f58:	86 83       	std	Z+6, r24	; 0x06
     f5a:	17 82       	std	Z+7, r1	; 0x07
     f5c:	80 91 b4 01 	lds	r24, 0x01B4
     f60:	80 87       	std	Z+8, r24	; 0x08
     f62:	11 86       	std	Z+9, r1	; 0x09
     f64:	0e 94 7f 04 	call	0x8fe	; 0x8fe <xprintf>
     f68:	ed b7       	in	r30, 0x3d	; 61
     f6a:	fe b7       	in	r31, 0x3e	; 62
     f6c:	3a 96       	adiw	r30, 0x0a	; 10
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	fe bf       	out	0x3e, r31	; 62
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	ed bf       	out	0x3d, r30	; 61
     f78:	05 c0       	rjmp	.+10     	; 0xf84 <handle_row+0x124>
     f7a:	2f 5f       	subi	r18, 0xFF	; 255
     f7c:	3f 4f       	sbci	r19, 0xFF	; 255
    // If we are removing a scancode we are looking for that code to set to zero.
    uint8_t from = (state ? 0 : scancode);
    uint8_t to   = (state ? scancode : 0);
    uint8_t i;

    for (i=0; i<6; i++) {
     f7e:	26 30       	cpi	r18, 0x06	; 6
     f80:	31 05       	cpc	r19, r1
     f82:	41 f6       	brne	.-112    	; 0xf14 <handle_row+0xb4>
static void handle_key(uint8_t row, uint8_t col, uint8_t state) {

    set_usb_key(keymap[row][col], state);

    // Send the report
    usb_keyboard_send();
     f84:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <usb_keyboard_send>
     f88:	08 94       	sec
     f8a:	e1 1c       	adc	r14, r1
     f8c:	f1 1c       	adc	r15, r1
     f8e:	21 96       	adiw	r28, 0x01	; 1

    uint8_t change = keystate[row+offs] ^ cols;
    uint8_t i;

    // Check for changed keys on the given row
    for (i=0; i<8; i++) {
     f90:	f8 e0       	ldi	r31, 0x08	; 8
     f92:	ef 16       	cp	r14, r31
     f94:	f1 04       	cpc	r15, r1
     f96:	09 f0       	breq	.+2      	; 0xf9a <handle_row+0x13a>
     f98:	94 cf       	rjmp	.-216    	; 0xec2 <handle_row+0x62>
            handle_key(row+offs, i, cols & (1<<i));
        }
    }

    // Update the row with the current state
    keystate[row+offs] = cols;
     f9a:	0f 53       	subi	r16, 0x3F	; 63
     f9c:	1e 4f       	sbci	r17, 0xFE	; 254
     f9e:	d8 01       	movw	r26, r16
     fa0:	dc 92       	st	X, r13

}
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	1f 91       	pop	r17
     fa8:	0f 91       	pop	r16
     faa:	ff 90       	pop	r15
     fac:	ef 90       	pop	r14
     fae:	df 90       	pop	r13
     fb0:	bf 90       	pop	r11
     fb2:	af 90       	pop	r10
     fb4:	9f 90       	pop	r9
     fb6:	8f 90       	pop	r8
     fb8:	7f 90       	pop	r7
     fba:	6f 90       	pop	r6
     fbc:	08 95       	ret

00000fbe <__udivmodsi4>:
     fbe:	a1 e2       	ldi	r26, 0x21	; 33
     fc0:	1a 2e       	mov	r1, r26
     fc2:	aa 1b       	sub	r26, r26
     fc4:	bb 1b       	sub	r27, r27
     fc6:	fd 01       	movw	r30, r26
     fc8:	0d c0       	rjmp	.+26     	; 0xfe4 <__udivmodsi4_ep>

00000fca <__udivmodsi4_loop>:
     fca:	aa 1f       	adc	r26, r26
     fcc:	bb 1f       	adc	r27, r27
     fce:	ee 1f       	adc	r30, r30
     fd0:	ff 1f       	adc	r31, r31
     fd2:	a2 17       	cp	r26, r18
     fd4:	b3 07       	cpc	r27, r19
     fd6:	e4 07       	cpc	r30, r20
     fd8:	f5 07       	cpc	r31, r21
     fda:	20 f0       	brcs	.+8      	; 0xfe4 <__udivmodsi4_ep>
     fdc:	a2 1b       	sub	r26, r18
     fde:	b3 0b       	sbc	r27, r19
     fe0:	e4 0b       	sbc	r30, r20
     fe2:	f5 0b       	sbc	r31, r21

00000fe4 <__udivmodsi4_ep>:
     fe4:	66 1f       	adc	r22, r22
     fe6:	77 1f       	adc	r23, r23
     fe8:	88 1f       	adc	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	1a 94       	dec	r1
     fee:	69 f7       	brne	.-38     	; 0xfca <__udivmodsi4_loop>
     ff0:	60 95       	com	r22
     ff2:	70 95       	com	r23
     ff4:	80 95       	com	r24
     ff6:	90 95       	com	r25
     ff8:	9b 01       	movw	r18, r22
     ffa:	ac 01       	movw	r20, r24
     ffc:	bd 01       	movw	r22, r26
     ffe:	cf 01       	movw	r24, r30
    1000:	08 95       	ret

00001002 <__prologue_saves__>:
    1002:	2f 92       	push	r2
    1004:	3f 92       	push	r3
    1006:	4f 92       	push	r4
    1008:	5f 92       	push	r5
    100a:	6f 92       	push	r6
    100c:	7f 92       	push	r7
    100e:	8f 92       	push	r8
    1010:	9f 92       	push	r9
    1012:	af 92       	push	r10
    1014:	bf 92       	push	r11
    1016:	cf 92       	push	r12
    1018:	df 92       	push	r13
    101a:	ef 92       	push	r14
    101c:	ff 92       	push	r15
    101e:	0f 93       	push	r16
    1020:	1f 93       	push	r17
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	ca 1b       	sub	r28, r26
    102c:	db 0b       	sbc	r29, r27
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	09 94       	ijmp

0000103a <__epilogue_restores__>:
    103a:	2a 88       	ldd	r2, Y+18	; 0x12
    103c:	39 88       	ldd	r3, Y+17	; 0x11
    103e:	48 88       	ldd	r4, Y+16	; 0x10
    1040:	5f 84       	ldd	r5, Y+15	; 0x0f
    1042:	6e 84       	ldd	r6, Y+14	; 0x0e
    1044:	7d 84       	ldd	r7, Y+13	; 0x0d
    1046:	8c 84       	ldd	r8, Y+12	; 0x0c
    1048:	9b 84       	ldd	r9, Y+11	; 0x0b
    104a:	aa 84       	ldd	r10, Y+10	; 0x0a
    104c:	b9 84       	ldd	r11, Y+9	; 0x09
    104e:	c8 84       	ldd	r12, Y+8	; 0x08
    1050:	df 80       	ldd	r13, Y+7	; 0x07
    1052:	ee 80       	ldd	r14, Y+6	; 0x06
    1054:	fd 80       	ldd	r15, Y+5	; 0x05
    1056:	0c 81       	ldd	r16, Y+4	; 0x04
    1058:	1b 81       	ldd	r17, Y+3	; 0x03
    105a:	aa 81       	ldd	r26, Y+2	; 0x02
    105c:	b9 81       	ldd	r27, Y+1	; 0x01
    105e:	ce 0f       	add	r28, r30
    1060:	d1 1d       	adc	r29, r1
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	de bf       	out	0x3e, r29	; 62
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	cd bf       	out	0x3d, r28	; 61
    106c:	ed 01       	movw	r28, r26
    106e:	08 95       	ret

00001070 <_exit>:
    1070:	f8 94       	cli

00001072 <__stop_program>:
    1072:	ff cf       	rjmp	.-2      	; 0x1072 <__stop_program>
