
example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000007b4  00000848  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080010c  0080010c  00000854  2**0
                  ALLOC
  3 .debug_aranges 00000070  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000108  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008cc  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000031b  00000000  00000000  00001298  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000841  00000000  00000000  000015b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00001df4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036f  00000000  00000000  00001e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000055f  00000000  00000000  00002203  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00002762  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	bf c0       	rjmp	.+382    	; 0x180 <__ctors_end>
   2:	00 00       	nop
   4:	d8 c0       	rjmp	.+432    	; 0x1b6 <__bad_interrupt>
   6:	00 00       	nop
   8:	d6 c0       	rjmp	.+428    	; 0x1b6 <__bad_interrupt>
   a:	00 00       	nop
   c:	d4 c0       	rjmp	.+424    	; 0x1b6 <__bad_interrupt>
   e:	00 00       	nop
  10:	d2 c0       	rjmp	.+420    	; 0x1b6 <__bad_interrupt>
  12:	00 00       	nop
  14:	d0 c0       	rjmp	.+416    	; 0x1b6 <__bad_interrupt>
  16:	00 00       	nop
  18:	ce c0       	rjmp	.+412    	; 0x1b6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	cc c0       	rjmp	.+408    	; 0x1b6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	ca c0       	rjmp	.+404    	; 0x1b6 <__bad_interrupt>
  22:	00 00       	nop
  24:	c8 c0       	rjmp	.+400    	; 0x1b6 <__bad_interrupt>
  26:	00 00       	nop
  28:	cd c1       	rjmp	.+922    	; 0x3c4 <__vector_10>
  2a:	00 00       	nop
  2c:	37 c2       	rjmp	.+1134   	; 0x49c <__vector_11>
  2e:	00 00       	nop
  30:	c2 c0       	rjmp	.+388    	; 0x1b6 <__bad_interrupt>
  32:	00 00       	nop
  34:	c0 c0       	rjmp	.+384    	; 0x1b6 <__bad_interrupt>
  36:	00 00       	nop
  38:	be c0       	rjmp	.+380    	; 0x1b6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	bc c0       	rjmp	.+376    	; 0x1b6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	ba c0       	rjmp	.+372    	; 0x1b6 <__bad_interrupt>
  42:	00 00       	nop
  44:	b8 c0       	rjmp	.+368    	; 0x1b6 <__bad_interrupt>
  46:	00 00       	nop
  48:	b6 c0       	rjmp	.+364    	; 0x1b6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b4 c0       	rjmp	.+360    	; 0x1b6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	b2 c0       	rjmp	.+356    	; 0x1b6 <__bad_interrupt>
  52:	00 00       	nop
  54:	b0 c0       	rjmp	.+352    	; 0x1b6 <__bad_interrupt>
  56:	00 00       	nop
  58:	ae c0       	rjmp	.+348    	; 0x1b6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ad c0       	rjmp	.+346    	; 0x1b8 <__vector_23>
  5e:	00 00       	nop
  60:	aa c0       	rjmp	.+340    	; 0x1b6 <__bad_interrupt>
  62:	00 00       	nop
  64:	a8 c0       	rjmp	.+336    	; 0x1b6 <__bad_interrupt>
  66:	00 00       	nop
  68:	a6 c0       	rjmp	.+332    	; 0x1b6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	a4 c0       	rjmp	.+328    	; 0x1b6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	a2 c0       	rjmp	.+324    	; 0x1b6 <__bad_interrupt>
  72:	00 00       	nop
  74:	a0 c0       	rjmp	.+320    	; 0x1b6 <__bad_interrupt>
  76:	00 00       	nop
  78:	9e c0       	rjmp	.+316    	; 0x1b6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	9c c0       	rjmp	.+312    	; 0x1b6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	9a c0       	rjmp	.+308    	; 0x1b6 <__bad_interrupt>
  82:	00 00       	nop
  84:	98 c0       	rjmp	.+304    	; 0x1b6 <__bad_interrupt>
  86:	00 00       	nop
  88:	96 c0       	rjmp	.+300    	; 0x1b6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	94 c0       	rjmp	.+296    	; 0x1b6 <__bad_interrupt>
  8e:	00 00       	nop
  90:	92 c0       	rjmp	.+292    	; 0x1b6 <__bad_interrupt>
  92:	00 00       	nop
  94:	90 c0       	rjmp	.+288    	; 0x1b6 <__bad_interrupt>
  96:	00 00       	nop
  98:	8e c0       	rjmp	.+284    	; 0x1b6 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	8c c0       	rjmp	.+280    	; 0x1b6 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	8a c0       	rjmp	.+276    	; 0x1b6 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	88 c0       	rjmp	.+272    	; 0x1b6 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	86 c0       	rjmp	.+268    	; 0x1b6 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <descriptor_list>:
  ac:	00 01 00 00 e3 00 12 00 02 00 00 f5 00 22 00 22     ............."."
  bc:	00 00 17 01 3f 00 21 00 00 07 01 09 00 03 00 00     ....?.!.........
  cc:	56 01 04 01 03 09 04 5a 01 10 02 03 09 04 6c 01     V......Z......l.
  dc:	12                                                  .

000000dd <endpoint_config_table>:
  dd:	00 00 01 c1 06 00                                   ......

000000e3 <device_descriptor>:
  e3:	12 01 00 02 00 00 00 20 c0 16 7c 04 00 01 01 02     ....... ..|.....
  f3:	00 01                                               ..

000000f5 <config1_descriptor>:
  f5:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
 105:	01 00 09 21 11 01 00 01 22 3f 00 07 05 83 03 08     ...!...."?......
 115:	00 01                                               ..

00000117 <keyboard_hid_report_desc>:
 117:	05 01 09 06 a1 01 75 01 95 08 05 07 19 e0 29 e7     ......u.......).
 127:	15 00 25 01 81 02 95 01 75 08 81 03 95 05 75 01     ..%.....u.....u.
 137:	05 08 19 01 29 05 91 02 95 01 75 03 91 03 95 06     ....).....u.....
 147:	75 08 15 00 25 68 05 07 19 00 29 68 81 00 c0        u...%h....)h...

00000156 <string0>:
 156:	04 03 09 04                                         ....

0000015a <string1>:
 15a:	10 03 4d 00 66 00 67 00 4e 00 61 00 6d 00 65 00     ..M.f.g.N.a.m.e.
 16a:	00 00                                               ..

0000016c <string2>:
 16c:	12 03 4b 00 65 00 79 00 62 00 6f 00 61 00 72 00     ..K.e.y.b.o.a.r.
 17c:	64 00 00 00                                         d...

00000180 <__ctors_end>:
 180:	11 24       	eor	r1, r1
 182:	1f be       	out	0x3f, r1	; 63
 184:	cf ef       	ldi	r28, 0xFF	; 255
 186:	da e0       	ldi	r29, 0x0A	; 10
 188:	de bf       	out	0x3e, r29	; 62
 18a:	cd bf       	out	0x3d, r28	; 61

0000018c <__do_copy_data>:
 18c:	11 e0       	ldi	r17, 0x01	; 1
 18e:	a0 e0       	ldi	r26, 0x00	; 0
 190:	b1 e0       	ldi	r27, 0x01	; 1
 192:	e4 eb       	ldi	r30, 0xB4	; 180
 194:	f7 e0       	ldi	r31, 0x07	; 7
 196:	02 c0       	rjmp	.+4      	; 0x19c <.do_copy_data_start>

00000198 <.do_copy_data_loop>:
 198:	05 90       	lpm	r0, Z+
 19a:	0d 92       	st	X+, r0

0000019c <.do_copy_data_start>:
 19c:	ac 30       	cpi	r26, 0x0C	; 12
 19e:	b1 07       	cpc	r27, r17
 1a0:	d9 f7       	brne	.-10     	; 0x198 <.do_copy_data_loop>

000001a2 <__do_clear_bss>:
 1a2:	11 e0       	ldi	r17, 0x01	; 1
 1a4:	ac e0       	ldi	r26, 0x0C	; 12
 1a6:	b1 e0       	ldi	r27, 0x01	; 1
 1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
 1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
 1ac:	a9 31       	cpi	r26, 0x19	; 25
 1ae:	b1 07       	cpc	r27, r17
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
 1b2:	37 d0       	rcall	.+110    	; 0x222 <main>
 1b4:	fd c2       	rjmp	.+1530   	; 0x7b0 <_exit>

000001b6 <__bad_interrupt>:
 1b6:	24 cf       	rjmp	.-440    	; 0x0 <__vectors>

000001b8 <__vector_23>:

// This interrupt routine is run approx 61 times per second.
// A very simple inactivity timeout is implemented, where we
// will send a space character.
ISR(TIMER0_OVF_vect)
{
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	2f 93       	push	r18
 1c4:	3f 93       	push	r19
 1c6:	4f 93       	push	r20
 1c8:	5f 93       	push	r21
 1ca:	6f 93       	push	r22
 1cc:	7f 93       	push	r23
 1ce:	8f 93       	push	r24
 1d0:	9f 93       	push	r25
 1d2:	af 93       	push	r26
 1d4:	bf 93       	push	r27
 1d6:	ef 93       	push	r30
 1d8:	ff 93       	push	r31
	idle_count++;
 1da:	80 91 0c 01 	lds	r24, 0x010C
 1de:	90 91 0d 01 	lds	r25, 0x010D
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	90 93 0d 01 	sts	0x010D, r25
 1e8:	80 93 0c 01 	sts	0x010C, r24
	if (idle_count > 61 * 8) {
 1ec:	89 5e       	subi	r24, 0xE9	; 233
 1ee:	91 40       	sbci	r25, 0x01	; 1
 1f0:	38 f0       	brcs	.+14     	; 0x200 <__vector_23+0x48>
		idle_count = 0;
 1f2:	10 92 0d 01 	sts	0x010D, r1
 1f6:	10 92 0c 01 	sts	0x010C, r1
		usb_keyboard_press(KEY_SPACE, 0);
 1fa:	8c e2       	ldi	r24, 0x2C	; 44
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	d5 d0       	rcall	.+426    	; 0x3aa <usb_keyboard_press>
	}
}
 200:	ff 91       	pop	r31
 202:	ef 91       	pop	r30
 204:	bf 91       	pop	r27
 206:	af 91       	pop	r26
 208:	9f 91       	pop	r25
 20a:	8f 91       	pop	r24
 20c:	7f 91       	pop	r23
 20e:	6f 91       	pop	r22
 210:	5f 91       	pop	r21
 212:	4f 91       	pop	r20
 214:	3f 91       	pop	r19
 216:	2f 91       	pop	r18
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <main>:
	{KEY_0,KEY_1,KEY_2,KEY_3,KEY_4,KEY_5,KEY_6,KEY_7,KEY_8,KEY_9};

uint16_t idle_count=0;

int main(void)
{
 222:	af 92       	push	r10
 224:	bf 92       	push	r11
 226:	df 92       	push	r13
 228:	ef 92       	push	r14
 22a:	ff 92       	push	r15
 22c:	0f 93       	push	r16
 22e:	1f 93       	push	r17
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
	uint8_t b, d, mask, i, reset_idle;
	uint8_t b_prev=0xFF, d_prev=0xFF;

	// set for 16 MHz clock
	CPU_PRESCALE(0);
 234:	80 e8       	ldi	r24, 0x80	; 128
 236:	80 93 61 00 	sts	0x0061, r24
 23a:	10 92 61 00 	sts	0x0061, r1

	// Configure all port B and port D pins as inputs with pullup resistors.
	// See the "Using I/O Pins" page for details.
	// http://www.pjrc.com/teensy/pins.html
	DDRD = 0x00;
 23e:	1a b8       	out	0x0a, r1	; 10
	DDRB = 0x00;
 240:	14 b8       	out	0x04, r1	; 4
	PORTB = 0xFF;
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	85 b9       	out	0x05, r24	; 5
	PORTD = 0xFF;
 246:	8b b9       	out	0x0b, r24	; 11

	// Initialize the USB, and then wait for the host to set configuration.
	// If the Teensy is powered without a PC connected to the USB port,
	// this will wait forever.
	usb_init();
 248:	4e d0       	rcall	.+156    	; 0x2e6 <usb_init>
	while (!usb_configured()) /* wait */ ;
 24a:	64 d0       	rcall	.+200    	; 0x314 <usb_configured>
 24c:	88 23       	and	r24, r24
 24e:	e9 f3       	breq	.-6      	; 0x24a <main+0x28>
 250:	80 e1       	ldi	r24, 0x10	; 16
 252:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 254:	20 e9       	ldi	r18, 0x90	; 144
 256:	31 e0       	ldi	r19, 0x01	; 1
 258:	f9 01       	movw	r30, r18
 25a:	31 97       	sbiw	r30, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <main+0x38>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 25e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 260:	d9 f7       	brne	.-10     	; 0x258 <main+0x36>

	// Configure timer 0 to generate a timer overflow interrupt every
	// 256*1024 clock cycles, or approx 61 Hz when using 16 MHz clock
	// This demonstrates how to use interrupts to implement a simple
	// inactivity timeout.
	TCCR0A = 0x00;
 262:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;
 264:	85 e0       	ldi	r24, 0x05	; 5
 266:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<TOIE0);
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	80 93 6e 00 	sts	0x006E, r24
 26e:	ff 24       	eor	r15, r15
 270:	fa 94       	dec	r15
 272:	0f ef       	ldi	r16, 0xFF	; 255
 274:	80 e4       	ldi	r24, 0x40	; 64
 276:	a8 2e       	mov	r10, r24
 278:	8f e1       	ldi	r24, 0x1F	; 31
 27a:	b8 2e       	mov	r11, r24

	while (1) {
		// read all port B and port D pins
		b = PINB;
 27c:	d3 b0       	in	r13, 0x03	; 3
		d = PIND;
 27e:	e9 b0       	in	r14, 0x09	; 9
 280:	c0 e0       	ldi	r28, 0x00	; 0
 282:	d1 e0       	ldi	r29, 0x01	; 1
 284:	11 e0       	ldi	r17, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
		// check if any pins are low, but were high previously
		mask = 1;
		reset_idle = 0;
		for (i=0; i<8; i++) {
			if (((b & mask) == 0) && (b_prev & mask) != 0) {
 288:	81 2f       	mov	r24, r17
 28a:	8d 21       	and	r24, r13
 28c:	51 f4       	brne	.+20     	; 0x2a2 <main+0x80>
 28e:	81 2f       	mov	r24, r17
 290:	8f 21       	and	r24, r15
 292:	39 f0       	breq	.+14     	; 0x2a2 <main+0x80>
				usb_keyboard_press(KEY_B, KEY_SHIFT);
 294:	85 e0       	ldi	r24, 0x05	; 5
 296:	62 e0       	ldi	r22, 0x02	; 2
 298:	88 d0       	rcall	.+272    	; 0x3aa <usb_keyboard_press>
				usb_keyboard_press(number_keys[i], 0);
 29a:	88 81       	ld	r24, Y
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	85 d0       	rcall	.+266    	; 0x3aa <usb_keyboard_press>
 2a0:	91 e0       	ldi	r25, 0x01	; 1
				reset_idle = 1;
			}
			if (((d & mask) == 0) && (d_prev & mask) != 0) {
 2a2:	81 2f       	mov	r24, r17
 2a4:	8e 21       	and	r24, r14
 2a6:	51 f4       	brne	.+20     	; 0x2bc <main+0x9a>
 2a8:	81 2f       	mov	r24, r17
 2aa:	80 23       	and	r24, r16
 2ac:	39 f0       	breq	.+14     	; 0x2bc <main+0x9a>
				usb_keyboard_press(KEY_D, KEY_SHIFT);
 2ae:	87 e0       	ldi	r24, 0x07	; 7
 2b0:	62 e0       	ldi	r22, 0x02	; 2
 2b2:	7b d0       	rcall	.+246    	; 0x3aa <usb_keyboard_press>
				usb_keyboard_press(number_keys[i], 0);
 2b4:	88 81       	ld	r24, Y
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	78 d0       	rcall	.+240    	; 0x3aa <usb_keyboard_press>
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	21 96       	adiw	r28, 0x01	; 1
		b = PINB;
		d = PIND;
		// check if any pins are low, but were high previously
		mask = 1;
		reset_idle = 0;
		for (i=0; i<8; i++) {
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	c8 30       	cpi	r28, 0x08	; 8
 2c2:	d8 07       	cpc	r29, r24
 2c4:	11 f0       	breq	.+4      	; 0x2ca <main+0xa8>
			if (((d & mask) == 0) && (d_prev & mask) != 0) {
				usb_keyboard_press(KEY_D, KEY_SHIFT);
				usb_keyboard_press(number_keys[i], 0);
				reset_idle = 1;
			}
			mask = mask << 1;
 2c6:	11 0f       	add	r17, r17
 2c8:	df cf       	rjmp	.-66     	; 0x288 <main+0x66>
		}
		// if any keypresses were detected, reset the idle counter
		if (reset_idle) {
 2ca:	99 23       	and	r25, r25
 2cc:	31 f0       	breq	.+12     	; 0x2da <main+0xb8>
			// variables shared with interrupt routines must be
			// accessed carefully so the interrupt routine doesn't
			// try to use the variable in the middle of our access
			cli();
 2ce:	f8 94       	cli
			idle_count = 0;
 2d0:	10 92 0d 01 	sts	0x010D, r1
 2d4:	10 92 0c 01 	sts	0x010C, r1
			sei();
 2d8:	78 94       	sei
 2da:	c5 01       	movw	r24, r10
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <main+0xba>
 2e0:	0e 2d       	mov	r16, r14
 2e2:	fd 2c       	mov	r15, r13
 2e4:	cb cf       	rjmp	.-106    	; 0x27c <main+0x5a>

000002e6 <usb_init>:


// initialize USB
void usb_init(void)
{
	HW_CONFIG();
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	80 93 d7 00 	sts	0x00D7, r24
	USB_FREEZE();	// enable USB
 2ec:	80 ea       	ldi	r24, 0xA0	; 160
 2ee:	80 93 d8 00 	sts	0x00D8, r24
	PLL_CONFIG();				// config PLL
 2f2:	82 e1       	ldi	r24, 0x12	; 18
 2f4:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 2f6:	09 b4       	in	r0, 0x29	; 41
 2f8:	00 fe       	sbrs	r0, 0
 2fa:	fd cf       	rjmp	.-6      	; 0x2f6 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
 2fc:	80 e9       	ldi	r24, 0x90	; 144
 2fe:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
 302:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
 306:	10 92 16 01 	sts	0x0116, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 30a:	8c e0       	ldi	r24, 0x0C	; 12
 30c:	80 93 e2 00 	sts	0x00E2, r24
	sei();
 310:	78 94       	sei
}
 312:	08 95       	ret

00000314 <usb_configured>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
	return usb_configuration;
 314:	80 91 16 01 	lds	r24, 0x0116
}
 318:	08 95       	ret

0000031a <usb_keyboard_send>:
// send the contents of keyboard_keys and keyboard_modifier_keys
int8_t usb_keyboard_send(void)
{
	uint8_t i, intr_state, timeout;

	if (!usb_configuration) return -1;
 31a:	80 91 16 01 	lds	r24, 0x0116
 31e:	88 23       	and	r24, r24
 320:	09 f4       	brne	.+2      	; 0x324 <usb_keyboard_send+0xa>
 322:	41 c0       	rjmp	.+130    	; 0x3a6 <usb_keyboard_send+0x8c>
	intr_state = SREG;
 324:	2f b7       	in	r18, 0x3f	; 63
	cli();
 326:	f8 94       	cli
	UENUM = KEYBOARD_ENDPOINT;
 328:	83 e0       	ldi	r24, 0x03	; 3
 32a:	80 93 e9 00 	sts	0x00E9, r24
	timeout = UDFNUML + 50;
 32e:	90 91 e4 00 	lds	r25, 0x00E4
 332:	9e 5c       	subi	r25, 0xCE	; 206
		// have we waited too long?
		if (UDFNUML == timeout) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = KEYBOARD_ENDPOINT;
 334:	33 e0       	ldi	r19, 0x03	; 3
	cli();
	UENUM = KEYBOARD_ENDPOINT;
	timeout = UDFNUML + 50;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 336:	80 91 e8 00 	lds	r24, 0x00E8
 33a:	85 fd       	sbrc	r24, 5
 33c:	0e c0       	rjmp	.+28     	; 0x35a <usb_keyboard_send+0x40>
		SREG = intr_state;
 33e:	2f bf       	out	0x3f, r18	; 63
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 340:	80 91 16 01 	lds	r24, 0x0116
 344:	88 23       	and	r24, r24
 346:	79 f1       	breq	.+94     	; 0x3a6 <usb_keyboard_send+0x8c>
		// have we waited too long?
		if (UDFNUML == timeout) return -1;
 348:	80 91 e4 00 	lds	r24, 0x00E4
 34c:	89 17       	cp	r24, r25
 34e:	59 f1       	breq	.+86     	; 0x3a6 <usb_keyboard_send+0x8c>
		// get ready to try checking again
		intr_state = SREG;
 350:	2f b7       	in	r18, 0x3f	; 63
		cli();
 352:	f8 94       	cli
		UENUM = KEYBOARD_ENDPOINT;
 354:	30 93 e9 00 	sts	0x00E9, r19
 358:	ee cf       	rjmp	.-36     	; 0x336 <usb_keyboard_send+0x1c>
	}
	UEDATX = keyboard_modifier_keys;
 35a:	80 91 0e 01 	lds	r24, 0x010E
 35e:	80 93 f1 00 	sts	0x00F1, r24
	UEDATX = 0;
 362:	10 92 f1 00 	sts	0x00F1, r1
	for (i=0; i<6; i++) {
		UEDATX = keyboard_keys[i];
 366:	80 91 0f 01 	lds	r24, 0x010F
 36a:	80 93 f1 00 	sts	0x00F1, r24
 36e:	80 91 10 01 	lds	r24, 0x0110
 372:	80 93 f1 00 	sts	0x00F1, r24
 376:	80 91 11 01 	lds	r24, 0x0111
 37a:	80 93 f1 00 	sts	0x00F1, r24
 37e:	80 91 12 01 	lds	r24, 0x0112
 382:	80 93 f1 00 	sts	0x00F1, r24
 386:	80 91 13 01 	lds	r24, 0x0113
 38a:	80 93 f1 00 	sts	0x00F1, r24
 38e:	80 91 14 01 	lds	r24, 0x0114
 392:	80 93 f1 00 	sts	0x00F1, r24
	}
	UEINTX = 0x3A;
 396:	8a e3       	ldi	r24, 0x3A	; 58
 398:	80 93 e8 00 	sts	0x00E8, r24
	keyboard_idle_count = 0;
 39c:	10 92 17 01 	sts	0x0117, r1
	SREG = intr_state;
 3a0:	2f bf       	out	0x3f, r18	; 63
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	08 95       	ret
	return 0;
 3a6:	8f ef       	ldi	r24, 0xFF	; 255
}
 3a8:	08 95       	ret

000003aa <usb_keyboard_press>:
// perform a single keystroke
int8_t usb_keyboard_press(uint8_t key, uint8_t modifier)
{
	int8_t r;

	keyboard_modifier_keys = modifier;
 3aa:	60 93 0e 01 	sts	0x010E, r22
	keyboard_keys[0] = key;
 3ae:	80 93 0f 01 	sts	0x010F, r24
	r = usb_keyboard_send();
 3b2:	b3 df       	rcall	.-154    	; 0x31a <usb_keyboard_send>
	if (r) return r;
 3b4:	88 23       	and	r24, r24
 3b6:	29 f4       	brne	.+10     	; 0x3c2 <usb_keyboard_press+0x18>
	keyboard_modifier_keys = 0;
 3b8:	10 92 0e 01 	sts	0x010E, r1
	keyboard_keys[0] = 0;
 3bc:	10 92 0f 01 	sts	0x010F, r1
	return usb_keyboard_send();
 3c0:	ac cf       	rjmp	.-168    	; 0x31a <usb_keyboard_send>
}
 3c2:	08 95       	ret

000003c4 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 3c4:	1f 92       	push	r1
 3c6:	0f 92       	push	r0
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	0f 92       	push	r0
 3cc:	11 24       	eor	r1, r1
 3ce:	2f 93       	push	r18
 3d0:	8f 93       	push	r24
 3d2:	9f 93       	push	r25
	uint8_t intbits, t, i;
	static uint8_t div4=0;

        intbits = UDINT;
 3d4:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
 3d8:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
 3dc:	98 2f       	mov	r25, r24
 3de:	83 ff       	sbrs	r24, 3
 3e0:	0f c0       	rjmp	.+30     	; 0x400 <__vector_10+0x3c>
		UENUM = 0;
 3e2:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
 3ec:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 3f0:	82 e2       	ldi	r24, 0x22	; 34
 3f2:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
 3f6:	88 e0       	ldi	r24, 0x08	; 8
 3f8:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
 3fc:	10 92 16 01 	sts	0x0116, r1
        }
	if ((intbits & (1<<SOFI)) && usb_configuration) {
 400:	92 ff       	sbrs	r25, 2
 402:	44 c0       	rjmp	.+136    	; 0x48c <__vector_10+0xc8>
 404:	80 91 16 01 	lds	r24, 0x0116
 408:	88 23       	and	r24, r24
 40a:	09 f4       	brne	.+2      	; 0x40e <__vector_10+0x4a>
 40c:	3f c0       	rjmp	.+126    	; 0x48c <__vector_10+0xc8>
		if (keyboard_idle_config && (++div4 & 3) == 0) {
 40e:	20 91 0a 01 	lds	r18, 0x010A
 412:	22 23       	and	r18, r18
 414:	d9 f1       	breq	.+118    	; 0x48c <__vector_10+0xc8>
 416:	80 91 18 01 	lds	r24, 0x0118
 41a:	8f 5f       	subi	r24, 0xFF	; 255
 41c:	80 93 18 01 	sts	0x0118, r24
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	83 70       	andi	r24, 0x03	; 3
 424:	90 70       	andi	r25, 0x00	; 0
 426:	89 2b       	or	r24, r25
 428:	89 f5       	brne	.+98     	; 0x48c <__vector_10+0xc8>
			UENUM = KEYBOARD_ENDPOINT;
 42a:	83 e0       	ldi	r24, 0x03	; 3
 42c:	80 93 e9 00 	sts	0x00E9, r24
			if (UEINTX & (1<<RWAL)) {
 430:	80 91 e8 00 	lds	r24, 0x00E8
 434:	85 ff       	sbrs	r24, 5
 436:	2a c0       	rjmp	.+84     	; 0x48c <__vector_10+0xc8>
				keyboard_idle_count++;
 438:	80 91 17 01 	lds	r24, 0x0117
 43c:	8f 5f       	subi	r24, 0xFF	; 255
 43e:	80 93 17 01 	sts	0x0117, r24
				if (keyboard_idle_count == keyboard_idle_config) {
 442:	82 17       	cp	r24, r18
 444:	19 f5       	brne	.+70     	; 0x48c <__vector_10+0xc8>
					keyboard_idle_count = 0;
 446:	10 92 17 01 	sts	0x0117, r1
					UEDATX = keyboard_modifier_keys;
 44a:	80 91 0e 01 	lds	r24, 0x010E
 44e:	80 93 f1 00 	sts	0x00F1, r24
					UEDATX = 0;
 452:	10 92 f1 00 	sts	0x00F1, r1
					for (i=0; i<6; i++) {
						UEDATX = keyboard_keys[i];
 456:	80 91 0f 01 	lds	r24, 0x010F
 45a:	80 93 f1 00 	sts	0x00F1, r24
 45e:	80 91 10 01 	lds	r24, 0x0110
 462:	80 93 f1 00 	sts	0x00F1, r24
 466:	80 91 11 01 	lds	r24, 0x0111
 46a:	80 93 f1 00 	sts	0x00F1, r24
 46e:	80 91 12 01 	lds	r24, 0x0112
 472:	80 93 f1 00 	sts	0x00F1, r24
 476:	80 91 13 01 	lds	r24, 0x0113
 47a:	80 93 f1 00 	sts	0x00F1, r24
 47e:	80 91 14 01 	lds	r24, 0x0114
 482:	80 93 f1 00 	sts	0x00F1, r24
					}
					UEINTX = 0x3A;
 486:	8a e3       	ldi	r24, 0x3A	; 58
 488:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 48c:	9f 91       	pop	r25
 48e:	8f 91       	pop	r24
 490:	2f 91       	pop	r18
 492:	0f 90       	pop	r0
 494:	0f be       	out	0x3f, r0	; 63
 496:	0f 90       	pop	r0
 498:	1f 90       	pop	r1
 49a:	18 95       	reti

0000049c <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 49c:	1f 92       	push	r1
 49e:	0f 92       	push	r0
 4a0:	0f b6       	in	r0, 0x3f	; 63
 4a2:	0f 92       	push	r0
 4a4:	11 24       	eor	r1, r1
 4a6:	0f 93       	push	r16
 4a8:	1f 93       	push	r17
 4aa:	2f 93       	push	r18
 4ac:	3f 93       	push	r19
 4ae:	4f 93       	push	r20
 4b0:	5f 93       	push	r21
 4b2:	6f 93       	push	r22
 4b4:	7f 93       	push	r23
 4b6:	8f 93       	push	r24
 4b8:	9f 93       	push	r25
 4ba:	af 93       	push	r26
 4bc:	bf 93       	push	r27
 4be:	ef 93       	push	r30
 4c0:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 4c2:	10 92 e9 00 	sts	0x00E9, r1
	intbits = UEINTX;
 4c6:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 4ca:	83 ff       	sbrs	r24, 3
 4cc:	5b c1       	rjmp	.+694    	; 0x784 <__vector_11+0x2e8>
                bmRequestType = UEDATX;
 4ce:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
 4d2:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
 4d6:	80 91 f1 00 	lds	r24, 0x00F1
 4da:	68 2f       	mov	r22, r24
 4dc:	70 e0       	ldi	r23, 0x00	; 0
                wValue |= (UEDATX << 8);
 4de:	20 91 f1 00 	lds	r18, 0x00F1
 4e2:	92 2f       	mov	r25, r18
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	68 2b       	or	r22, r24
 4e8:	79 2b       	or	r23, r25
                wIndex = UEDATX;
 4ea:	80 91 f1 00 	lds	r24, 0x00F1
 4ee:	a8 2f       	mov	r26, r24
 4f0:	b0 e0       	ldi	r27, 0x00	; 0
                wIndex |= (UEDATX << 8);
 4f2:	20 91 f1 00 	lds	r18, 0x00F1
 4f6:	92 2f       	mov	r25, r18
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	a8 2b       	or	r26, r24
 4fc:	b9 2b       	or	r27, r25
                wLength = UEDATX;
 4fe:	10 91 f1 00 	lds	r17, 0x00F1
                wLength |= (UEDATX << 8);
 502:	00 91 f1 00 	lds	r16, 0x00F1
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 506:	82 ef       	ldi	r24, 0xF2	; 242
 508:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
 50c:	36 30       	cpi	r19, 0x06	; 6
 50e:	09 f0       	breq	.+2      	; 0x512 <__vector_11+0x76>
 510:	5a c0       	rjmp	.+180    	; 0x5c6 <__vector_11+0x12a>
 512:	23 eb       	ldi	r18, 0xB3	; 179
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	a9 01       	movw	r20, r18
 518:	45 50       	subi	r20, 0x05	; 5
 51a:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
 51c:	f9 01       	movw	r30, r18
 51e:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
 520:	85 91       	lpm	r24, Z+
 522:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
 524:	86 17       	cp	r24, r22
 526:	97 07       	cpc	r25, r23
 528:	01 f5       	brne	.+64     	; 0x56a <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 52a:	fa 01       	movw	r30, r20
 52c:	85 91       	lpm	r24, Z+
 52e:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
 530:	8a 17       	cp	r24, r26
 532:	9b 07       	cpc	r25, r27
 534:	d1 f4       	brne	.+52     	; 0x56a <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 536:	9a 01       	movw	r18, r20
 538:	2e 5f       	subi	r18, 0xFE	; 254
 53a:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
 53c:	f9 01       	movw	r30, r18
 53e:	65 91       	lpm	r22, Z+
 540:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
 542:	2e 5f       	subi	r18, 0xFE	; 254
 544:	3f 4f       	sbci	r19, 0xFF	; 255
 546:	f9 01       	movw	r30, r18
 548:	44 91       	lpm	r20, Z+
                bRequest = UEDATX;
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
 54a:	21 2f       	mov	r18, r17
 54c:	30 e0       	ldi	r19, 0x00	; 0
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 54e:	90 2f       	mov	r25, r16
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	28 2b       	or	r18, r24
 554:	39 2b       	or	r19, r25
 556:	2f 3f       	cpi	r18, 0xFF	; 255
 558:	31 05       	cpc	r19, r1
 55a:	19 f0       	breq	.+6      	; 0x562 <__vector_11+0xc6>
 55c:	10 f0       	brcs	.+4      	; 0x562 <__vector_11+0xc6>
 55e:	2f ef       	ldi	r18, 0xFF	; 255
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	24 17       	cp	r18, r20
 564:	58 f4       	brcc	.+22     	; 0x57c <__vector_11+0xe0>
 566:	42 2f       	mov	r20, r18
 568:	09 c0       	rjmp	.+18     	; 0x57c <__vector_11+0xe0>
 56a:	29 5f       	subi	r18, 0xF9	; 249
 56c:	3f 4f       	sbci	r19, 0xFF	; 255
 56e:	49 5f       	subi	r20, 0xF9	; 249
 570:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	24 3e       	cpi	r18, 0xE4	; 228
 576:	3f 07       	cpc	r19, r31
 578:	89 f6       	brne	.-94     	; 0x51c <__vector_11+0x80>
 57a:	04 c1       	rjmp	.+520    	; 0x784 <__vector_11+0x2e8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 57c:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 57e:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 582:	28 2f       	mov	r18, r24
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	c9 01       	movw	r24, r18
 588:	85 70       	andi	r24, 0x05	; 5
 58a:	90 70       	andi	r25, 0x00	; 0
 58c:	89 2b       	or	r24, r25
 58e:	b9 f3       	breq	.-18     	; 0x57e <__vector_11+0xe2>
				if (i & (1<<RXOUTI)) return;	// abort
 590:	22 fd       	sbrc	r18, 2
 592:	fb c0       	rjmp	.+502    	; 0x78a <__vector_11+0x2ee>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 594:	34 2f       	mov	r19, r20
 596:	41 32       	cpi	r20, 0x21	; 33
 598:	08 f0       	brcs	.+2      	; 0x59c <__vector_11+0x100>
 59a:	30 e2       	ldi	r19, 0x20	; 32
 59c:	23 2f       	mov	r18, r19
 59e:	cb 01       	movw	r24, r22
 5a0:	06 c0       	rjmp	.+12     	; 0x5ae <__vector_11+0x112>
				for (i = n; i; i--) {
 5a2:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
 5a4:	01 96       	adiw	r24, 0x01	; 1
 5a6:	e4 91       	lpm	r30, Z+
 5a8:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 5ac:	21 50       	subi	r18, 0x01	; 1
 5ae:	22 23       	and	r18, r18
 5b0:	c1 f7       	brne	.-16     	; 0x5a2 <__vector_11+0x106>
 5b2:	63 0f       	add	r22, r19
 5b4:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 5b6:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5b8:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 5bc:	44 23       	and	r20, r20
 5be:	f9 f6       	brne	.-66     	; 0x57e <__vector_11+0xe2>
 5c0:	30 32       	cpi	r19, 0x20	; 32
 5c2:	e9 f2       	breq	.-70     	; 0x57e <__vector_11+0xe2>
 5c4:	e2 c0       	rjmp	.+452    	; 0x78a <__vector_11+0x2ee>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 5c6:	35 30       	cpi	r19, 0x05	; 5
 5c8:	61 f4       	brne	.+24     	; 0x5e2 <__vector_11+0x146>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5ca:	8e ef       	ldi	r24, 0xFE	; 254
 5cc:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 5d0:	80 91 e8 00 	lds	r24, 0x00E8
 5d4:	80 ff       	sbrs	r24, 0
 5d6:	fc cf       	rjmp	.-8      	; 0x5d0 <__vector_11+0x134>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 5d8:	86 2f       	mov	r24, r22
 5da:	80 68       	ori	r24, 0x80	; 128
 5dc:	80 93 e3 00 	sts	0x00E3, r24
 5e0:	d4 c0       	rjmp	.+424    	; 0x78a <__vector_11+0x2ee>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 5e2:	39 30       	cpi	r19, 0x09	; 9
 5e4:	31 f5       	brne	.+76     	; 0x632 <__vector_11+0x196>
 5e6:	44 23       	and	r20, r20
 5e8:	09 f0       	breq	.+2      	; 0x5ec <__vector_11+0x150>
 5ea:	71 c0       	rjmp	.+226    	; 0x6ce <__vector_11+0x232>
			usb_configuration = wValue;
 5ec:	60 93 16 01 	sts	0x0116, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5f0:	8e ef       	ldi	r24, 0xFE	; 254
 5f2:	80 93 e8 00 	sts	0x00E8, r24
 5f6:	8d ed       	ldi	r24, 0xDD	; 221
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	21 e0       	ldi	r18, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 5fc:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
 600:	fc 01       	movw	r30, r24
 602:	01 96       	adiw	r24, 0x01	; 1
 604:	e4 91       	lpm	r30, Z+
				UECONX = en;
 606:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
 60a:	ee 23       	and	r30, r30
 60c:	69 f0       	breq	.+26     	; 0x628 <__vector_11+0x18c>
					UECFG0X = pgm_read_byte(cfg++);
 60e:	ac 01       	movw	r20, r24
 610:	4f 5f       	subi	r20, 0xFF	; 255
 612:	5f 4f       	sbci	r21, 0xFF	; 255
 614:	fc 01       	movw	r30, r24
 616:	84 91       	lpm	r24, Z+
 618:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
 61c:	ca 01       	movw	r24, r20
 61e:	01 96       	adiw	r24, 0x01	; 1
 620:	fa 01       	movw	r30, r20
 622:	34 91       	lpm	r19, Z+
 624:	30 93 ed 00 	sts	0x00ED, r19
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 628:	2f 5f       	subi	r18, 0xFF	; 255
 62a:	25 30       	cpi	r18, 0x05	; 5
 62c:	39 f7       	brne	.-50     	; 0x5fc <__vector_11+0x160>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 62e:	8e e1       	ldi	r24, 0x1E	; 30
 630:	49 c0       	rjmp	.+146    	; 0x6c4 <__vector_11+0x228>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 632:	38 30       	cpi	r19, 0x08	; 8
 634:	51 f4       	brne	.+20     	; 0x64a <__vector_11+0x1ae>
 636:	40 38       	cpi	r20, 0x80	; 128
 638:	09 f0       	breq	.+2      	; 0x63c <__vector_11+0x1a0>
 63a:	49 c0       	rjmp	.+146    	; 0x6ce <__vector_11+0x232>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 63c:	80 91 e8 00 	lds	r24, 0x00E8
 640:	80 ff       	sbrs	r24, 0
 642:	fc cf       	rjmp	.-8      	; 0x63c <__vector_11+0x1a0>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 644:	80 91 16 01 	lds	r24, 0x0116
 648:	7b c0       	rjmp	.+246    	; 0x740 <__vector_11+0x2a4>
			usb_send_in();
			return;
		}

		if (bRequest == GET_STATUS) {
 64a:	33 23       	and	r19, r19
 64c:	d1 f4       	brne	.+52     	; 0x682 <__vector_11+0x1e6>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 64e:	80 91 e8 00 	lds	r24, 0x00E8
 652:	80 ff       	sbrs	r24, 0
 654:	fc cf       	rjmp	.-8      	; 0x64e <__vector_11+0x1b2>

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 656:	42 38       	cpi	r20, 0x82	; 130
 658:	11 f0       	breq	.+4      	; 0x65e <__vector_11+0x1c2>
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	0d c0       	rjmp	.+26     	; 0x678 <__vector_11+0x1dc>
				UENUM = wIndex;
 65e:	a0 93 e9 00 	sts	0x00E9, r26
				if (UECONX & (1<<STALLRQ)) i = 1;
 662:	80 91 eb 00 	lds	r24, 0x00EB
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	25 e0       	ldi	r18, 0x05	; 5
 66a:	96 95       	lsr	r25
 66c:	87 95       	ror	r24
 66e:	2a 95       	dec	r18
 670:	e1 f7       	brne	.-8      	; 0x66a <__vector_11+0x1ce>
 672:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
 674:	10 92 e9 00 	sts	0x00E9, r1
			}
			#endif
			UEDATX = i;
 678:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
 67c:	10 92 f1 00 	sts	0x00F1, r1
 680:	7d c0       	rjmp	.+250    	; 0x77c <__vector_11+0x2e0>
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 682:	31 30       	cpi	r19, 0x01	; 1
 684:	11 f0       	breq	.+4      	; 0x68a <__vector_11+0x1ee>
 686:	33 30       	cpi	r19, 0x03	; 3
 688:	11 f5       	brne	.+68     	; 0x6ce <__vector_11+0x232>
 68a:	42 30       	cpi	r20, 0x02	; 2
 68c:	01 f5       	brne	.+64     	; 0x6ce <__vector_11+0x232>
 68e:	61 15       	cp	r22, r1
 690:	71 05       	cpc	r23, r1
 692:	e9 f4       	brne	.+58     	; 0x6ce <__vector_11+0x232>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
 694:	2a 2f       	mov	r18, r26
 696:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 698:	82 2f       	mov	r24, r18
 69a:	81 50       	subi	r24, 0x01	; 1
 69c:	84 30       	cpi	r24, 0x04	; 4
 69e:	b8 f4       	brcc	.+46     	; 0x6ce <__vector_11+0x232>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6a0:	8e ef       	ldi	r24, 0xFE	; 254
 6a2:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 6a6:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
 6aa:	33 30       	cpi	r19, 0x03	; 3
 6ac:	09 f4       	brne	.+2      	; 0x6b0 <__vector_11+0x214>
 6ae:	6a c0       	rjmp	.+212    	; 0x784 <__vector_11+0x2e8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 6b0:	89 e1       	ldi	r24, 0x19	; 25
 6b2:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <__vector_11+0x224>
 6bc:	88 0f       	add	r24, r24
 6be:	99 1f       	adc	r25, r25
 6c0:	2a 95       	dec	r18
 6c2:	e2 f7       	brpl	.-8      	; 0x6bc <__vector_11+0x220>
 6c4:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
 6c8:	10 92 ea 00 	sts	0x00EA, r1
 6cc:	5e c0       	rjmp	.+188    	; 0x78a <__vector_11+0x2ee>
				}
				return;
			}
		}
		#endif
		if (wIndex == KEYBOARD_INTERFACE) {
 6ce:	ab 2b       	or	r26, r27
 6d0:	09 f0       	breq	.+2      	; 0x6d4 <__vector_11+0x238>
 6d2:	58 c0       	rjmp	.+176    	; 0x784 <__vector_11+0x2e8>
			if (bmRequestType == 0xA1) {
 6d4:	41 3a       	cpi	r20, 0xA1	; 161
 6d6:	b9 f5       	brne	.+110    	; 0x746 <__vector_11+0x2aa>
				if (bRequest == HID_GET_REPORT) {
 6d8:	31 30       	cpi	r19, 0x01	; 1
 6da:	09 f5       	brne	.+66     	; 0x71e <__vector_11+0x282>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 6dc:	80 91 e8 00 	lds	r24, 0x00E8
 6e0:	80 ff       	sbrs	r24, 0
 6e2:	fc cf       	rjmp	.-8      	; 0x6dc <__vector_11+0x240>
		#endif
		if (wIndex == KEYBOARD_INTERFACE) {
			if (bmRequestType == 0xA1) {
				if (bRequest == HID_GET_REPORT) {
					usb_wait_in_ready();
					UEDATX = keyboard_modifier_keys;
 6e4:	80 91 0e 01 	lds	r24, 0x010E
 6e8:	80 93 f1 00 	sts	0x00F1, r24
					UEDATX = 0;
 6ec:	10 92 f1 00 	sts	0x00F1, r1
					for (i=0; i<6; i++) {
						UEDATX = keyboard_keys[i];
 6f0:	80 91 0f 01 	lds	r24, 0x010F
 6f4:	80 93 f1 00 	sts	0x00F1, r24
 6f8:	80 91 10 01 	lds	r24, 0x0110
 6fc:	80 93 f1 00 	sts	0x00F1, r24
 700:	80 91 11 01 	lds	r24, 0x0111
 704:	80 93 f1 00 	sts	0x00F1, r24
 708:	80 91 12 01 	lds	r24, 0x0112
 70c:	80 93 f1 00 	sts	0x00F1, r24
 710:	80 91 13 01 	lds	r24, 0x0113
 714:	80 93 f1 00 	sts	0x00F1, r24
 718:	80 91 14 01 	lds	r24, 0x0114
 71c:	11 c0       	rjmp	.+34     	; 0x740 <__vector_11+0x2a4>
					}
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_IDLE) {
 71e:	32 30       	cpi	r19, 0x02	; 2
 720:	39 f4       	brne	.+14     	; 0x730 <__vector_11+0x294>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 722:	80 91 e8 00 	lds	r24, 0x00E8
 726:	80 ff       	sbrs	r24, 0
 728:	fc cf       	rjmp	.-8      	; 0x722 <__vector_11+0x286>
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_IDLE) {
					usb_wait_in_ready();
					UEDATX = keyboard_idle_config;
 72a:	80 91 0a 01 	lds	r24, 0x010A
 72e:	08 c0       	rjmp	.+16     	; 0x740 <__vector_11+0x2a4>
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_PROTOCOL) {
 730:	33 30       	cpi	r19, 0x03	; 3
 732:	41 f5       	brne	.+80     	; 0x784 <__vector_11+0x2e8>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 734:	80 91 e8 00 	lds	r24, 0x00E8
 738:	80 ff       	sbrs	r24, 0
 73a:	fc cf       	rjmp	.-8      	; 0x734 <__vector_11+0x298>
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_PROTOCOL) {
					usb_wait_in_ready();
					UEDATX = keyboard_protocol;
 73c:	80 91 0b 01 	lds	r24, 0x010B
 740:	80 93 f1 00 	sts	0x00F1, r24
 744:	1b c0       	rjmp	.+54     	; 0x77c <__vector_11+0x2e0>
					usb_send_in();
					return;
				}
			}
			if (bmRequestType == 0x21) {
 746:	41 32       	cpi	r20, 0x21	; 33
 748:	e9 f4       	brne	.+58     	; 0x784 <__vector_11+0x2e8>
				if (bRequest == HID_SET_REPORT) {
 74a:	39 30       	cpi	r19, 0x09	; 9
 74c:	61 f4       	brne	.+24     	; 0x766 <__vector_11+0x2ca>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 74e:	80 91 e8 00 	lds	r24, 0x00E8
 752:	82 ff       	sbrs	r24, 2
 754:	fc cf       	rjmp	.-8      	; 0x74e <__vector_11+0x2b2>
				}
			}
			if (bmRequestType == 0x21) {
				if (bRequest == HID_SET_REPORT) {
					usb_wait_receive_out();
					keyboard_leds = UEDATX;
 756:	80 91 f1 00 	lds	r24, 0x00F1
 75a:	80 93 15 01 	sts	0x0115, r24
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 75e:	8b ef       	ldi	r24, 0xFB	; 251
 760:	80 93 e8 00 	sts	0x00E8, r24
 764:	0b c0       	rjmp	.+22     	; 0x77c <__vector_11+0x2e0>
					keyboard_leds = UEDATX;
					usb_ack_out();
					usb_send_in();
					return;
				}
				if (bRequest == HID_SET_IDLE) {
 766:	3a 30       	cpi	r19, 0x0A	; 10
 768:	29 f4       	brne	.+10     	; 0x774 <__vector_11+0x2d8>
					keyboard_idle_config = (wValue >> 8);
 76a:	70 93 0a 01 	sts	0x010A, r23
					keyboard_idle_count = 0;
 76e:	10 92 17 01 	sts	0x0117, r1
 772:	04 c0       	rjmp	.+8      	; 0x77c <__vector_11+0x2e0>
					usb_send_in();
					return;
				}
				if (bRequest == HID_SET_PROTOCOL) {
 774:	3b 30       	cpi	r19, 0x0B	; 11
 776:	31 f4       	brne	.+12     	; 0x784 <__vector_11+0x2e8>
					keyboard_protocol = wValue;
 778:	60 93 0b 01 	sts	0x010B, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 77c:	8e ef       	ldi	r24, 0xFE	; 254
 77e:	80 93 e8 00 	sts	0x00E8, r24
 782:	03 c0       	rjmp	.+6      	; 0x78a <__vector_11+0x2ee>
					return;
				}
			}
		}
	}
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 784:	81 e2       	ldi	r24, 0x21	; 33
 786:	80 93 eb 00 	sts	0x00EB, r24
}
 78a:	ff 91       	pop	r31
 78c:	ef 91       	pop	r30
 78e:	bf 91       	pop	r27
 790:	af 91       	pop	r26
 792:	9f 91       	pop	r25
 794:	8f 91       	pop	r24
 796:	7f 91       	pop	r23
 798:	6f 91       	pop	r22
 79a:	5f 91       	pop	r21
 79c:	4f 91       	pop	r20
 79e:	3f 91       	pop	r19
 7a0:	2f 91       	pop	r18
 7a2:	1f 91       	pop	r17
 7a4:	0f 91       	pop	r16
 7a6:	0f 90       	pop	r0
 7a8:	0f be       	out	0x3f, r0	; 63
 7aa:	0f 90       	pop	r0
 7ac:	1f 90       	pop	r1
 7ae:	18 95       	reti

000007b0 <_exit>:
 7b0:	f8 94       	cli

000007b2 <__stop_program>:
 7b2:	ff cf       	rjmp	.-2      	; 0x7b2 <__stop_program>
